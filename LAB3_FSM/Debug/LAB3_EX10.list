
LAB3_EX10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003264  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003394  08003394  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003394  08003394  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003394  08003394  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800339c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000058  080033f4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080033f4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009be5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c11  00000000  00000000  00029c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017190  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caa7  00000000  00000000  00043e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827bd  00000000  00000000  000508ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d30ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000d3100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003358 	.word	0x08003358

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003358 	.word	0x08003358

0800014c <isButton1Pressed>:
int TimerForKey3Press = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButton2Pressed>:

int isButton2Pressed() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButton3Pressed>:

int isButton3Pressed() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKey1Process>:

void subKey1Process() {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKey1Process+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074

080001d0 <subKey2Process>:

void subKey2Process() {
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKey2Process+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000078 	.word	0x20000078

080001e8 <subKey3Process>:

void subKey3Process() {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKey3Process+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKey1Input>:

void getKey1Input() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKey1Input+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKey1Input+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKey1Input+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKey1Input+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <getKey1Input+0x90>)
 800021a:	f002 f889 	bl	8002330 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKey1Input+0x8c>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKey1Input+0x88>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKey1Input+0x84>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKey1Input+0x7e>
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKey1Input+0x84>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKey1Input+0x8c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKey1Input+0x7e>
		if (KeyReg3 != KeyReg2) {
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKey1Input+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKey1Input+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKey1Input+0x66>
			KeyReg3 = KeyReg2;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKey1Input+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKey1Input+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE) {
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKey1Input+0x8c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKey1Input+0x7e>
				subKey1Process();
 800025a:	f7ff ffad 	bl	80001b8 <subKey1Process>
				TimerForKey1Press = 200;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKey1Input+0x98>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
			if (TimerForKey1Press == 0) {
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 8000264:	e00b      	b.n	800027e <getKey1Input+0x7e>
			TimerForKey1Press--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKey1Input+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKey1Input+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
			if (TimerForKey1Press == 0) {
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKey1Input+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKey1Input+0x7e>
				KeyReg3 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKey1Input+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010800 	.word	0x40010800
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000030 	.word	0x20000030

0800029c <getKey2Input>:

void getKey2Input() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKey2Input+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKey2Input+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKey2Input+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKey2Input+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <getKey2Input+0x90>)
 80002b6:	f002 f83b 	bl	8002330 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKey2Input+0x8c>)
 80002c0:	601a      	str	r2, [r3, #0]
	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)) {
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKey2Input+0x88>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKey2Input+0x84>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKey2Input+0x7e>
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKey2Input+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKey2Input+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d11f      	bne.n	800031a <getKey2Input+0x7e>
		if (KeyReg7 != KeyReg6) {
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <getKey2Input+0x94>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <getKey2Input+0x8c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d00d      	beq.n	8000302 <getKey2Input+0x66>
			KeyReg7 = KeyReg6;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKey2Input+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKey2Input+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]
			if (KeyReg6 == PRESSED_STATE) {
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKey2Input+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <getKey2Input+0x7e>
				subKey2Process();
 80002f6:	f7ff ff6b 	bl	80001d0 <subKey2Process>
				TimerForKey2Press = 200;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKey2Input+0x98>)
 80002fc:	22c8      	movs	r2, #200	; 0xc8
 80002fe:	601a      	str	r2, [r3, #0]
			if (TimerForKey2Press == 0) {
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 8000300:	e00b      	b.n	800031a <getKey2Input+0x7e>
			TimerForKey2Press--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKey2Input+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKey2Input+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
			if (TimerForKey2Press == 0) {
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKey2Input+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKey2Input+0x7e>
				KeyReg7 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKey2Input+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40010800 	.word	0x40010800
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <getKey3Input>:

void getKey3Input() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKey3Input+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKey3Input+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKey3Input+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKey3Input+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800034c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKey3Input+0x90>)
 8000352:	f001 ffed 	bl	8002330 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKey3Input+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
	if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)) {
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKey3Input+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKey3Input+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKey3Input+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKey3Input+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKey3Input+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKey3Input+0x7e>
		if (KeyReg11 != KeyReg10) {
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <getKey3Input+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKey3Input+0x8c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKey3Input+0x66>
			KeyReg11 = KeyReg10;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKey3Input+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKey3Input+0x94>)
 8000388:	6013      	str	r3, [r2, #0]
			if (KeyReg10 == PRESSED_STATE) {
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKey3Input+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKey3Input+0x7e>
				subKey3Process();
 8000392:	f7ff ff29 	bl	80001e8 <subKey3Process>
				TimerForKey3Press = 200;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKey3Input+0x98>)
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	601a      	str	r2, [r3, #0]
			if (TimerForKey3Press == 0) {
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 800039c:	e00b      	b.n	80003b6 <getKey3Input+0x7e>
			TimerForKey3Press--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKey3Input+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKey3Input+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if (TimerForKey3Press == 0) {
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKey3Input+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKey3Input+0x7e>
				KeyReg11 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKey3Input+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010800 	.word	0x40010800
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000038 	.word	0x20000038

080003d4 <fsm_automatic_run>:
int timeGreen2 = 3;
int timeYellow2 = 2;
int timeGreen1 = 3;
int timeYellow1 = 2;

void fsm_automatic_run() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch (status) {
 80003d8:	4b9d      	ldr	r3, [pc, #628]	; (8000650 <fsm_automatic_run+0x27c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	2b04      	cmp	r3, #4
 80003e0:	f200 8261 	bhi.w	80008a6 <fsm_automatic_run+0x4d2>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <fsm_automatic_run+0x18>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	08000401 	.word	0x08000401
 80003f0:	08000441 	.word	0x08000441
 80003f4:	08000547 	.word	0x08000547
 80003f8:	08000695 	.word	0x08000695
 80003fc:	0800079b 	.word	0x0800079b
	case INIT:
		clearAllLed();
 8000400:	f001 fbbe 	bl	8001b80 <clearAllLed>
		setTimeGreen2 = timeGreen2;
 8000404:	4b93      	ldr	r3, [pc, #588]	; (8000654 <fsm_automatic_run+0x280>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a93      	ldr	r2, [pc, #588]	; (8000658 <fsm_automatic_run+0x284>)
 800040a:	6013      	str	r3, [r2, #0]
		setTimeYellow2 = timeYellow1;
 800040c:	4b93      	ldr	r3, [pc, #588]	; (800065c <fsm_automatic_run+0x288>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a93      	ldr	r2, [pc, #588]	; (8000660 <fsm_automatic_run+0x28c>)
 8000412:	6013      	str	r3, [r2, #0]
		setTimeGreen1 = timeGreen1;
 8000414:	4b93      	ldr	r3, [pc, #588]	; (8000664 <fsm_automatic_run+0x290>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a93      	ldr	r2, [pc, #588]	; (8000668 <fsm_automatic_run+0x294>)
 800041a:	6013      	str	r3, [r2, #0]
		setTimeYellow1 = timeYellow1;
 800041c:	4b8f      	ldr	r3, [pc, #572]	; (800065c <fsm_automatic_run+0x288>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a92      	ldr	r2, [pc, #584]	; (800066c <fsm_automatic_run+0x298>)
 8000422:	6013      	str	r3, [r2, #0]
		status = AUTO_RED_GREEN;
 8000424:	4b8a      	ldr	r3, [pc, #552]	; (8000650 <fsm_automatic_run+0x27c>)
 8000426:	2202      	movs	r2, #2
 8000428:	601a      	str	r2, [r3, #0]
		setTimer1(3000);
 800042a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800042e:	f001 fa83 	bl	8001938 <setTimer1>
		setTimer2(20);
 8000432:	2014      	movs	r0, #20
 8000434:	f001 fa9c 	bl	8001970 <setTimer2>
		setTimer3(20);
 8000438:	2014      	movs	r0, #20
 800043a:	f001 fab5 	bl	80019a8 <setTimer3>
		break;
 800043e:	e23b      	b.n	80008b8 <fsm_automatic_run+0x4e4>
	case AUTO_RED_GREEN:
		setLedRed1_Green2();
 8000440:	f001 fbc6 	bl	8001bd0 <setLedRed1_Green2>
		if (timer2_flag == 1) {
 8000444:	4b8a      	ldr	r3, [pc, #552]	; (8000670 <fsm_automatic_run+0x29c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d113      	bne.n	8000474 <fsm_automatic_run+0xa0>
			timeRed1 = timeGreen2 + timeYellow2;
 800044c:	4b81      	ldr	r3, [pc, #516]	; (8000654 <fsm_automatic_run+0x280>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b88      	ldr	r3, [pc, #544]	; (8000674 <fsm_automatic_run+0x2a0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4413      	add	r3, r2
 8000456:	4a88      	ldr	r2, [pc, #544]	; (8000678 <fsm_automatic_run+0x2a4>)
 8000458:	6013      	str	r3, [r2, #0]
			curTimeGreen2 = timeGreen2;
 800045a:	4b7e      	ldr	r3, [pc, #504]	; (8000654 <fsm_automatic_run+0x280>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a87      	ldr	r2, [pc, #540]	; (800067c <fsm_automatic_run+0x2a8>)
 8000460:	6013      	str	r3, [r2, #0]
			timeGreen2--;
 8000462:	4b7c      	ldr	r3, [pc, #496]	; (8000654 <fsm_automatic_run+0x280>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a7a      	ldr	r2, [pc, #488]	; (8000654 <fsm_automatic_run+0x280>)
 800046a:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 800046c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000470:	f001 fa7e 	bl	8001970 <setTimer2>
		}
		if (timer3_flag == 1) {
 8000474:	4b82      	ldr	r3, [pc, #520]	; (8000680 <fsm_automatic_run+0x2ac>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d10c      	bne.n	8000496 <fsm_automatic_run+0xc2>
			update7SEG1(timeRed1);
 800047c:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <fsm_automatic_run+0x2a4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f001 f89b 	bl	80015bc <update7SEG1>
			update7SEG2(curTimeGreen2);
 8000486:	4b7d      	ldr	r3, [pc, #500]	; (800067c <fsm_automatic_run+0x2a8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f001 f8e6 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000490:	20fa      	movs	r0, #250	; 0xfa
 8000492:	f001 fa89 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000496:	4b7b      	ldr	r3, [pc, #492]	; (8000684 <fsm_automatic_run+0x2b0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10f      	bne.n	80004be <fsm_automatic_run+0xea>
			timeYellow2 = setTimeYellow2;
 800049e:	4b70      	ldr	r3, [pc, #448]	; (8000660 <fsm_automatic_run+0x28c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a74      	ldr	r2, [pc, #464]	; (8000674 <fsm_automatic_run+0x2a0>)
 80004a4:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_YELLOW;
 80004a6:	4b6a      	ldr	r3, [pc, #424]	; (8000650 <fsm_automatic_run+0x27c>)
 80004a8:	2203      	movs	r2, #3
 80004aa:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow2 * 1000);
 80004ac:	4b6c      	ldr	r3, [pc, #432]	; (8000660 <fsm_automatic_run+0x28c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b4:	fb02 f303 	mul.w	r3, r2, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fa3d 	bl	8001938 <setTimer1>
		}
		if (isButton1Pressed() == 1) {
 80004be:	f7ff fe45 	bl	800014c <isButton1Pressed>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d106      	bne.n	80004d6 <fsm_automatic_run+0x102>
			status = MAN_RED_GREEN;
 80004c8:	4b61      	ldr	r3, [pc, #388]	; (8000650 <fsm_automatic_run+0x27c>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80004ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80004d2:	f001 fa31 	bl	8001938 <setTimer1>
		}
		if (isButton3Pressed() == 1) {
 80004d6:	f7ff fe5d 	bl	8000194 <isButton3Pressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b01      	cmp	r3, #1
 80004de:	f040 81e4 	bne.w	80008aa <fsm_automatic_run+0x4d6>
			timeGreen2 = 3;
 80004e2:	4b5c      	ldr	r3, [pc, #368]	; (8000654 <fsm_automatic_run+0x280>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 80004e8:	4b62      	ldr	r3, [pc, #392]	; (8000674 <fsm_automatic_run+0x2a0>)
 80004ea:	2202      	movs	r2, #2
 80004ec:	601a      	str	r2, [r3, #0]
			timeGreen1 = 3;
 80004ee:	4b5d      	ldr	r3, [pc, #372]	; (8000664 <fsm_automatic_run+0x290>)
 80004f0:	2203      	movs	r2, #3
 80004f2:	601a      	str	r2, [r3, #0]
			timeYellow1 = 2;
 80004f4:	4b59      	ldr	r3, [pc, #356]	; (800065c <fsm_automatic_run+0x288>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
			setTimeGreen2 = timeGreen2;
 80004fa:	4b56      	ldr	r3, [pc, #344]	; (8000654 <fsm_automatic_run+0x280>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a56      	ldr	r2, [pc, #344]	; (8000658 <fsm_automatic_run+0x284>)
 8000500:	6013      	str	r3, [r2, #0]
			setTimeYellow2 = timeYellow1;
 8000502:	4b56      	ldr	r3, [pc, #344]	; (800065c <fsm_automatic_run+0x288>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a56      	ldr	r2, [pc, #344]	; (8000660 <fsm_automatic_run+0x28c>)
 8000508:	6013      	str	r3, [r2, #0]
			setTimeGreen1 = timeGreen1;
 800050a:	4b56      	ldr	r3, [pc, #344]	; (8000664 <fsm_automatic_run+0x290>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a56      	ldr	r2, [pc, #344]	; (8000668 <fsm_automatic_run+0x294>)
 8000510:	6013      	str	r3, [r2, #0]
			setTimeYellow1 = timeYellow1;
 8000512:	4b52      	ldr	r3, [pc, #328]	; (800065c <fsm_automatic_run+0x288>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a55      	ldr	r2, [pc, #340]	; (800066c <fsm_automatic_run+0x298>)
 8000518:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 800051a:	4b4f      	ldr	r3, [pc, #316]	; (8000658 <fsm_automatic_run+0x284>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b50      	ldr	r3, [pc, #320]	; (8000660 <fsm_automatic_run+0x28c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a58      	ldr	r2, [pc, #352]	; (8000688 <fsm_automatic_run+0x2b4>)
 8000526:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 8000528:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <fsm_automatic_run+0x294>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b4f      	ldr	r3, [pc, #316]	; (800066c <fsm_automatic_run+0x298>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4413      	add	r3, r2
 8000532:	4a56      	ldr	r2, [pc, #344]	; (800068c <fsm_automatic_run+0x2b8>)
 8000534:	6013      	str	r3, [r2, #0]
			status = SET_RED_GREEN;
 8000536:	4b46      	ldr	r3, [pc, #280]	; (8000650 <fsm_automatic_run+0x27c>)
 8000538:	2216      	movs	r2, #22
 800053a:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800053c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000540:	f001 f9fa 	bl	8001938 <setTimer1>
		}
		break;
 8000544:	e1b1      	b.n	80008aa <fsm_automatic_run+0x4d6>
	case AUTO_RED_YELLOW:
		setLedRed1_Yellow2();
 8000546:	f001 fb6b 	bl	8001c20 <setLedRed1_Yellow2>
		if (timer2_flag == 1) {
 800054a:	4b49      	ldr	r3, [pc, #292]	; (8000670 <fsm_automatic_run+0x29c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d110      	bne.n	8000574 <fsm_automatic_run+0x1a0>
			timeRed1 = timeYellow2;
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <fsm_automatic_run+0x2a0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a48      	ldr	r2, [pc, #288]	; (8000678 <fsm_automatic_run+0x2a4>)
 8000558:	6013      	str	r3, [r2, #0]
			curTimeYellow2 = timeYellow2;
 800055a:	4b46      	ldr	r3, [pc, #280]	; (8000674 <fsm_automatic_run+0x2a0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a4c      	ldr	r2, [pc, #304]	; (8000690 <fsm_automatic_run+0x2bc>)
 8000560:	6013      	str	r3, [r2, #0]
			timeYellow2--;
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <fsm_automatic_run+0x2a0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3b01      	subs	r3, #1
 8000568:	4a42      	ldr	r2, [pc, #264]	; (8000674 <fsm_automatic_run+0x2a0>)
 800056a:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f001 f9fe 	bl	8001970 <setTimer2>
		}
		if (timer3_flag == 1) {
 8000574:	4b42      	ldr	r3, [pc, #264]	; (8000680 <fsm_automatic_run+0x2ac>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10c      	bne.n	8000596 <fsm_automatic_run+0x1c2>
			update7SEG1(timeRed1);
 800057c:	4b3e      	ldr	r3, [pc, #248]	; (8000678 <fsm_automatic_run+0x2a4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f81b 	bl	80015bc <update7SEG1>
			update7SEG2(curTimeYellow2);
 8000586:	4b42      	ldr	r3, [pc, #264]	; (8000690 <fsm_automatic_run+0x2bc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f866 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000590:	20fa      	movs	r0, #250	; 0xfa
 8000592:	f001 fa09 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <fsm_automatic_run+0x2b0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d113      	bne.n	80005c6 <fsm_automatic_run+0x1f2>
			timeGreen1 = setTimeGreen1;
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <fsm_automatic_run+0x294>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a30      	ldr	r2, [pc, #192]	; (8000664 <fsm_automatic_run+0x290>)
 80005a4:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 80005a6:	4b31      	ldr	r3, [pc, #196]	; (800066c <fsm_automatic_run+0x298>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a2c      	ldr	r2, [pc, #176]	; (800065c <fsm_automatic_run+0x288>)
 80005ac:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_RED;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <fsm_automatic_run+0x27c>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen1 * 1000);
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <fsm_automatic_run+0x294>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f9b9 	bl	8001938 <setTimer1>
		}
		if (isButton1Pressed() == 1) {
 80005c6:	f7ff fdc1 	bl	800014c <isButton1Pressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d106      	bne.n	80005de <fsm_automatic_run+0x20a>
			status = MAN_RED_YELLOW;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <fsm_automatic_run+0x27c>)
 80005d2:	220d      	movs	r2, #13
 80005d4:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80005d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80005da:	f001 f9ad 	bl	8001938 <setTimer1>
		}
		if (isButton3Pressed() == 1) {
 80005de:	f7ff fdd9 	bl	8000194 <isButton3Pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	f040 8162 	bne.w	80008ae <fsm_automatic_run+0x4da>
			timeGreen2 = 3;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <fsm_automatic_run+0x280>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <fsm_automatic_run+0x2a0>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
			timeGreen1 = 3;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <fsm_automatic_run+0x290>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	601a      	str	r2, [r3, #0]
			timeYellow1 = 2;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <fsm_automatic_run+0x288>)
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]
			setTimeGreen2 = timeGreen2;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <fsm_automatic_run+0x280>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <fsm_automatic_run+0x284>)
 8000608:	6013      	str	r3, [r2, #0]
			setTimeYellow2 = timeYellow2;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <fsm_automatic_run+0x2a0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <fsm_automatic_run+0x28c>)
 8000610:	6013      	str	r3, [r2, #0]
			setTimeGreen1 = timeGreen1;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <fsm_automatic_run+0x290>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <fsm_automatic_run+0x294>)
 8000618:	6013      	str	r3, [r2, #0]
			setTimeYellow1 = timeYellow1;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <fsm_automatic_run+0x288>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <fsm_automatic_run+0x298>)
 8000620:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <fsm_automatic_run+0x284>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <fsm_automatic_run+0x28c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <fsm_automatic_run+0x2b4>)
 800062e:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <fsm_automatic_run+0x294>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <fsm_automatic_run+0x298>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4413      	add	r3, r2
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <fsm_automatic_run+0x2b8>)
 800063c:	6013      	str	r3, [r2, #0]
			status = SET_RED_YELLOW;
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <fsm_automatic_run+0x27c>)
 8000640:	2217      	movs	r2, #23
 8000642:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000644:	f241 3088 	movw	r0, #5000	; 0x1388
 8000648:	f001 f976 	bl	8001938 <setTimer1>
		}
		break;
 800064c:	e12f      	b.n	80008ae <fsm_automatic_run+0x4da>
 800064e:	bf00      	nop
 8000650:	20000080 	.word	0x20000080
 8000654:	2000003c 	.word	0x2000003c
 8000658:	200000c0 	.word	0x200000c0
 800065c:	20000048 	.word	0x20000048
 8000660:	200000a4 	.word	0x200000a4
 8000664:	20000044 	.word	0x20000044
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000b0 	.word	0x200000b0
 8000670:	20000098 	.word	0x20000098
 8000674:	20000040 	.word	0x20000040
 8000678:	200000a8 	.word	0x200000a8
 800067c:	200000d0 	.word	0x200000d0
 8000680:	200000a0 	.word	0x200000a0
 8000684:	20000090 	.word	0x20000090
 8000688:	200000bc 	.word	0x200000bc
 800068c:	200000cc 	.word	0x200000cc
 8000690:	200000c4 	.word	0x200000c4
	case AUTO_GREEN_RED:
		setLedGreen1_Red2();
 8000694:	f001 faec 	bl	8001c70 <setLedGreen1_Red2>
		if (timer2_flag == 1) {
 8000698:	4b88      	ldr	r3, [pc, #544]	; (80008bc <fsm_automatic_run+0x4e8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d113      	bne.n	80006c8 <fsm_automatic_run+0x2f4>
			timeRed2 = timeGreen1 + timeYellow1;
 80006a0:	4b87      	ldr	r3, [pc, #540]	; (80008c0 <fsm_automatic_run+0x4ec>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b87      	ldr	r3, [pc, #540]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a87      	ldr	r2, [pc, #540]	; (80008c8 <fsm_automatic_run+0x4f4>)
 80006ac:	6013      	str	r3, [r2, #0]
			curTimeGreen1 = timeGreen1;
 80006ae:	4b84      	ldr	r3, [pc, #528]	; (80008c0 <fsm_automatic_run+0x4ec>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a86      	ldr	r2, [pc, #536]	; (80008cc <fsm_automatic_run+0x4f8>)
 80006b4:	6013      	str	r3, [r2, #0]
			timeGreen1--;
 80006b6:	4b82      	ldr	r3, [pc, #520]	; (80008c0 <fsm_automatic_run+0x4ec>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a80      	ldr	r2, [pc, #512]	; (80008c0 <fsm_automatic_run+0x4ec>)
 80006be:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c4:	f001 f954 	bl	8001970 <setTimer2>
		}
		if (timer3_flag == 1) {
 80006c8:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <fsm_automatic_run+0x4fc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10c      	bne.n	80006ea <fsm_automatic_run+0x316>
			update7SEG1(curTimeGreen1);
 80006d0:	4b7e      	ldr	r3, [pc, #504]	; (80008cc <fsm_automatic_run+0x4f8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ff71 	bl	80015bc <update7SEG1>
			update7SEG2(timeRed2);
 80006da:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <fsm_automatic_run+0x4f4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ffbc 	bl	800165c <update7SEG2>
			setTimer3(250);
 80006e4:	20fa      	movs	r0, #250	; 0xfa
 80006e6:	f001 f95f 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 80006ea:	4b7a      	ldr	r3, [pc, #488]	; (80008d4 <fsm_automatic_run+0x500>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d10f      	bne.n	8000712 <fsm_automatic_run+0x33e>
			timeYellow1 = setTimeYellow1;
 80006f2:	4b79      	ldr	r3, [pc, #484]	; (80008d8 <fsm_automatic_run+0x504>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a73      	ldr	r2, [pc, #460]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80006f8:	6013      	str	r3, [r2, #0]
			status = AUTO_YELLOW_RED;
 80006fa:	4b78      	ldr	r3, [pc, #480]	; (80008dc <fsm_automatic_run+0x508>)
 80006fc:	2205      	movs	r2, #5
 80006fe:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow1 * 1000);
 8000700:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <fsm_automatic_run+0x504>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f001 f913 	bl	8001938 <setTimer1>
		}
		if (isButton1Pressed() == 1) {
 8000712:	f7ff fd1b 	bl	800014c <isButton1Pressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d106      	bne.n	800072a <fsm_automatic_run+0x356>
			status = MAN_GREEN_RED;
 800071c:	4b6f      	ldr	r3, [pc, #444]	; (80008dc <fsm_automatic_run+0x508>)
 800071e:	220e      	movs	r2, #14
 8000720:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000722:	f241 3088 	movw	r0, #5000	; 0x1388
 8000726:	f001 f907 	bl	8001938 <setTimer1>
		}
		if (isButton3Pressed() == 1) {
 800072a:	f7ff fd33 	bl	8000194 <isButton3Pressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 80be 	bne.w	80008b2 <fsm_automatic_run+0x4de>
			timeGreen2 = 3;
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <fsm_automatic_run+0x50c>)
 8000738:	2203      	movs	r2, #3
 800073a:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 800073c:	4b69      	ldr	r3, [pc, #420]	; (80008e4 <fsm_automatic_run+0x510>)
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
			timeGreen1 = 3;
 8000742:	4b5f      	ldr	r3, [pc, #380]	; (80008c0 <fsm_automatic_run+0x4ec>)
 8000744:	2203      	movs	r2, #3
 8000746:	601a      	str	r2, [r3, #0]
			timeYellow1 = 2;
 8000748:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <fsm_automatic_run+0x4f0>)
 800074a:	2202      	movs	r2, #2
 800074c:	601a      	str	r2, [r3, #0]
			setTimeGreen2 = timeGreen2;
 800074e:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <fsm_automatic_run+0x50c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a65      	ldr	r2, [pc, #404]	; (80008e8 <fsm_automatic_run+0x514>)
 8000754:	6013      	str	r3, [r2, #0]
			setTimeYellow2 = timeYellow2;
 8000756:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <fsm_automatic_run+0x510>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a64      	ldr	r2, [pc, #400]	; (80008ec <fsm_automatic_run+0x518>)
 800075c:	6013      	str	r3, [r2, #0]
			setTimeGreen1 = timeGreen1;
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <fsm_automatic_run+0x4ec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a63      	ldr	r2, [pc, #396]	; (80008f0 <fsm_automatic_run+0x51c>)
 8000764:	6013      	str	r3, [r2, #0]
			setTimeYellow1 = timeYellow1;
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <fsm_automatic_run+0x4f0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a5b      	ldr	r2, [pc, #364]	; (80008d8 <fsm_automatic_run+0x504>)
 800076c:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 800076e:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <fsm_automatic_run+0x514>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b5e      	ldr	r3, [pc, #376]	; (80008ec <fsm_automatic_run+0x518>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a5e      	ldr	r2, [pc, #376]	; (80008f4 <fsm_automatic_run+0x520>)
 800077a:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 800077c:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <fsm_automatic_run+0x51c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b55      	ldr	r3, [pc, #340]	; (80008d8 <fsm_automatic_run+0x504>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	4a5c      	ldr	r2, [pc, #368]	; (80008f8 <fsm_automatic_run+0x524>)
 8000788:	6013      	str	r3, [r2, #0]
			status = SET_GREEN_RED;
 800078a:	4b54      	ldr	r3, [pc, #336]	; (80008dc <fsm_automatic_run+0x508>)
 800078c:	2218      	movs	r2, #24
 800078e:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000790:	f241 3088 	movw	r0, #5000	; 0x1388
 8000794:	f001 f8d0 	bl	8001938 <setTimer1>
		}
		break;
 8000798:	e08b      	b.n	80008b2 <fsm_automatic_run+0x4de>
	case AUTO_YELLOW_RED:
		setLedYellow1_Red2();
 800079a:	f001 fa91 	bl	8001cc0 <setLedYellow1_Red2>
		if (timer2_flag == 1) {
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <fsm_automatic_run+0x4e8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d110      	bne.n	80007c8 <fsm_automatic_run+0x3f4>
			timeRed2 = timeYellow1;
 80007a6:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a47      	ldr	r2, [pc, #284]	; (80008c8 <fsm_automatic_run+0x4f4>)
 80007ac:	6013      	str	r3, [r2, #0]
			curTimeYellow1 = timeYellow1;
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a52      	ldr	r2, [pc, #328]	; (80008fc <fsm_automatic_run+0x528>)
 80007b4:	6013      	str	r3, [r2, #0]
			timeYellow1--;
 80007b6:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	4a41      	ldr	r2, [pc, #260]	; (80008c4 <fsm_automatic_run+0x4f0>)
 80007be:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f001 f8d4 	bl	8001970 <setTimer2>
		}
		if (timer3_flag == 1) {
 80007c8:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <fsm_automatic_run+0x4fc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10c      	bne.n	80007ea <fsm_automatic_run+0x416>
			update7SEG1(curTimeYellow1);
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <fsm_automatic_run+0x528>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fef1 	bl	80015bc <update7SEG1>
			update7SEG2(timeRed2);
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <fsm_automatic_run+0x4f4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 ff3c 	bl	800165c <update7SEG2>
			setTimer3(250);
 80007e4:	20fa      	movs	r0, #250	; 0xfa
 80007e6:	f001 f8df 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <fsm_automatic_run+0x500>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d113      	bne.n	800081a <fsm_automatic_run+0x446>
			timeGreen2 = setTimeGreen2;
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <fsm_automatic_run+0x514>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <fsm_automatic_run+0x50c>)
 80007f8:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <fsm_automatic_run+0x518>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a39      	ldr	r2, [pc, #228]	; (80008e4 <fsm_automatic_run+0x510>)
 8000800:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <fsm_automatic_run+0x508>)
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen2 * 1000);
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <fsm_automatic_run+0x514>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f88f 	bl	8001938 <setTimer1>
		}
		if (isButton1Pressed() == 1) {
 800081a:	f7ff fc97 	bl	800014c <isButton1Pressed>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d106      	bne.n	8000832 <fsm_automatic_run+0x45e>
			status = MAN_YELLOW_RED;
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <fsm_automatic_run+0x508>)
 8000826:	220f      	movs	r2, #15
 8000828:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 800082a:	f241 3088 	movw	r0, #5000	; 0x1388
 800082e:	f001 f883 	bl	8001938 <setTimer1>
		}
		if (isButton3Pressed() == 1) {
 8000832:	f7ff fcaf 	bl	8000194 <isButton3Pressed>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d13c      	bne.n	80008b6 <fsm_automatic_run+0x4e2>
			timeGreen2 = 3;
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <fsm_automatic_run+0x50c>)
 800083e:	2203      	movs	r2, #3
 8000840:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <fsm_automatic_run+0x510>)
 8000844:	2202      	movs	r2, #2
 8000846:	601a      	str	r2, [r3, #0]
			timeGreen1 = 3;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <fsm_automatic_run+0x4ec>)
 800084a:	2203      	movs	r2, #3
 800084c:	601a      	str	r2, [r3, #0]
			timeYellow1 = 2;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <fsm_automatic_run+0x4f0>)
 8000850:	2202      	movs	r2, #2
 8000852:	601a      	str	r2, [r3, #0]
			setTimeGreen2 = timeGreen2;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <fsm_automatic_run+0x50c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <fsm_automatic_run+0x514>)
 800085a:	6013      	str	r3, [r2, #0]
			setTimeYellow2 = timeYellow2;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <fsm_automatic_run+0x510>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <fsm_automatic_run+0x518>)
 8000862:	6013      	str	r3, [r2, #0]
			setTimeGreen1 = timeGreen1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <fsm_automatic_run+0x4ec>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <fsm_automatic_run+0x51c>)
 800086a:	6013      	str	r3, [r2, #0]
			setTimeYellow1 = timeYellow1;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <fsm_automatic_run+0x4f0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <fsm_automatic_run+0x504>)
 8000872:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <fsm_automatic_run+0x514>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <fsm_automatic_run+0x518>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4413      	add	r3, r2
 800087e:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <fsm_automatic_run+0x520>)
 8000880:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <fsm_automatic_run+0x51c>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <fsm_automatic_run+0x504>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <fsm_automatic_run+0x524>)
 800088e:	6013      	str	r3, [r2, #0]
			status = SET_YELLOW_RED;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <fsm_automatic_run+0x508>)
 8000892:	2219      	movs	r2, #25
 8000894:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000896:	f241 3088 	movw	r0, #5000	; 0x1388
 800089a:	f001 f84d 	bl	8001938 <setTimer1>
			setTimer3(250);
 800089e:	20fa      	movs	r0, #250	; 0xfa
 80008a0:	f001 f882 	bl	80019a8 <setTimer3>
		}
		break;
 80008a4:	e007      	b.n	80008b6 <fsm_automatic_run+0x4e2>
	default:
		break;
 80008a6:	bf00      	nop
 80008a8:	e006      	b.n	80008b8 <fsm_automatic_run+0x4e4>
		break;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <fsm_automatic_run+0x4e4>
		break;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <fsm_automatic_run+0x4e4>
		break;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <fsm_automatic_run+0x4e4>
		break;
 80008b6:	bf00      	nop
	}
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000098 	.word	0x20000098
 80008c0:	20000044 	.word	0x20000044
 80008c4:	20000048 	.word	0x20000048
 80008c8:	200000c8 	.word	0x200000c8
 80008cc:	200000b4 	.word	0x200000b4
 80008d0:	200000a0 	.word	0x200000a0
 80008d4:	20000090 	.word	0x20000090
 80008d8:	200000b0 	.word	0x200000b0
 80008dc:	20000080 	.word	0x20000080
 80008e0:	2000003c 	.word	0x2000003c
 80008e4:	20000040 	.word	0x20000040
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	200000a4 	.word	0x200000a4
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	200000bc 	.word	0x200000bc
 80008f8:	200000cc 	.word	0x200000cc
 80008fc:	200000ac 	.word	0x200000ac

08000900 <fsm_manual_run>:
 *      Author: ADMIN
 */

#include "fsm_manual.h"

void fsm_manual_run() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	switch (status) {
 8000904:	4b62      	ldr	r3, [pc, #392]	; (8000a90 <fsm_manual_run+0x190>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b0c      	subs	r3, #12
 800090a:	2b03      	cmp	r3, #3
 800090c:	f200 80b5 	bhi.w	8000a7a <fsm_manual_run+0x17a>
 8000910:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fsm_manual_run+0x18>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000929 	.word	0x08000929
 800091c:	0800097f 	.word	0x0800097f
 8000920:	080009d3 	.word	0x080009d3
 8000924:	08000a27 	.word	0x08000a27
	case MAN_RED_GREEN:
		setLedRed1_Green2();
 8000928:	f001 f952 	bl	8001bd0 <setLedRed1_Green2>
		if (timer1_flag == 1) {
 800092c:	4b59      	ldr	r3, [pc, #356]	; (8000a94 <fsm_manual_run+0x194>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d116      	bne.n	8000962 <fsm_manual_run+0x62>
			timeGreen2 = setTimeGreen2;
 8000934:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <fsm_manual_run+0x198>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <fsm_manual_run+0x19c>)
 800093a:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 800093c:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <fsm_manual_run+0x1a0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a58      	ldr	r2, [pc, #352]	; (8000aa4 <fsm_manual_run+0x1a4>)
 8000942:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <fsm_manual_run+0x190>)
 8000946:	2202      	movs	r2, #2
 8000948:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen2 * 1000);
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <fsm_manual_run+0x198>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ffee 	bl	8001938 <setTimer1>
			setTimer2(100);
 800095c:	2064      	movs	r0, #100	; 0x64
 800095e:	f001 f807 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000962:	f7ff fbf3 	bl	800014c <isButton1Pressed>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	f040 8088 	bne.w	8000a7e <fsm_manual_run+0x17e>
			status = MAN_RED_YELLOW;
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <fsm_manual_run+0x190>)
 8000970:	220d      	movs	r2, #13
 8000972:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000974:	f241 3088 	movw	r0, #5000	; 0x1388
 8000978:	f000 ffde 	bl	8001938 <setTimer1>
		}
		break;
 800097c:	e07f      	b.n	8000a7e <fsm_manual_run+0x17e>
	case MAN_RED_YELLOW:
		setLedRed1_Yellow2();
 800097e:	f001 f94f 	bl	8001c20 <setLedRed1_Yellow2>
		if (timer1_flag == 1) {
 8000982:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <fsm_manual_run+0x194>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d116      	bne.n	80009b8 <fsm_manual_run+0xb8>
			timeGreen2 = setTimeGreen2;
 800098a:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <fsm_manual_run+0x198>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <fsm_manual_run+0x19c>)
 8000990:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <fsm_manual_run+0x1a0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a43      	ldr	r2, [pc, #268]	; (8000aa4 <fsm_manual_run+0x1a4>)
 8000998:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_YELLOW;
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <fsm_manual_run+0x190>)
 800099c:	2203      	movs	r2, #3
 800099e:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow2 * 1000);
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <fsm_manual_run+0x1a0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a8:	fb02 f303 	mul.w	r3, r2, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 ffc3 	bl	8001938 <setTimer1>
			setTimer2(10);
 80009b2:	200a      	movs	r0, #10
 80009b4:	f000 ffdc 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 80009b8:	f7ff fbc8 	bl	800014c <isButton1Pressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d15f      	bne.n	8000a82 <fsm_manual_run+0x182>
			status = MAN_GREEN_RED;
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <fsm_manual_run+0x190>)
 80009c4:	220e      	movs	r2, #14
 80009c6:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80009c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80009cc:	f000 ffb4 	bl	8001938 <setTimer1>
		}
		break;
 80009d0:	e057      	b.n	8000a82 <fsm_manual_run+0x182>
	case MAN_GREEN_RED:
		setLedGreen1_Red2();
 80009d2:	f001 f94d 	bl	8001c70 <setLedGreen1_Red2>
		if (timer1_flag == 1) {
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <fsm_manual_run+0x194>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d116      	bne.n	8000a0c <fsm_manual_run+0x10c>
			timeGreen1 = setTimeGreen1;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <fsm_manual_run+0x1a8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a32      	ldr	r2, [pc, #200]	; (8000aac <fsm_manual_run+0x1ac>)
 80009e4:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <fsm_manual_run+0x1b0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <fsm_manual_run+0x1b4>)
 80009ec:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_RED;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <fsm_manual_run+0x190>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen1 * 1000);
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <fsm_manual_run+0x1a8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 ff99 	bl	8001938 <setTimer1>
			setTimer2(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f000 ffb2 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000a0c:	f7ff fb9e 	bl	800014c <isButton1Pressed>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d137      	bne.n	8000a86 <fsm_manual_run+0x186>
			status = MAN_YELLOW_RED;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <fsm_manual_run+0x190>)
 8000a18:	220f      	movs	r2, #15
 8000a1a:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000a1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a20:	f000 ff8a 	bl	8001938 <setTimer1>
		}
		break;
 8000a24:	e02f      	b.n	8000a86 <fsm_manual_run+0x186>
	case MAN_YELLOW_RED:
		setLedYellow1_Red2();
 8000a26:	f001 f94b 	bl	8001cc0 <setLedYellow1_Red2>
		if (timer1_flag == 1) {
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <fsm_manual_run+0x194>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d116      	bne.n	8000a60 <fsm_manual_run+0x160>
			timeGreen1 = setTimeGreen1;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <fsm_manual_run+0x1a8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <fsm_manual_run+0x1ac>)
 8000a38:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <fsm_manual_run+0x1b0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <fsm_manual_run+0x1b4>)
 8000a40:	6013      	str	r3, [r2, #0]
			status = AUTO_YELLOW_RED;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <fsm_manual_run+0x190>)
 8000a44:	2205      	movs	r2, #5
 8000a46:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow1 * 1000);
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <fsm_manual_run+0x1b0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 ff6f 	bl	8001938 <setTimer1>
			setTimer2(10);
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f000 ff88 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000a60:	f7ff fb74 	bl	800014c <isButton1Pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d10f      	bne.n	8000a8a <fsm_manual_run+0x18a>
			status = MAN_RED_GREEN;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <fsm_manual_run+0x190>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 8000a70:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a74:	f000 ff60 	bl	8001938 <setTimer1>
		}
		break;
 8000a78:	e007      	b.n	8000a8a <fsm_manual_run+0x18a>
	default:
		break;
 8000a7a:	bf00      	nop
 8000a7c:	e006      	b.n	8000a8c <fsm_manual_run+0x18c>
		break;
 8000a7e:	bf00      	nop
 8000a80:	e004      	b.n	8000a8c <fsm_manual_run+0x18c>
		break;
 8000a82:	bf00      	nop
 8000a84:	e002      	b.n	8000a8c <fsm_manual_run+0x18c>
		break;
 8000a86:	bf00      	nop
 8000a88:	e000      	b.n	8000a8c <fsm_manual_run+0x18c>
		break;
 8000a8a:	bf00      	nop
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000080 	.word	0x20000080
 8000a94:	20000090 	.word	0x20000090
 8000a98:	200000c0 	.word	0x200000c0
 8000a9c:	2000003c 	.word	0x2000003c
 8000aa0:	200000a4 	.word	0x200000a4
 8000aa4:	20000040 	.word	0x20000040
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	20000044 	.word	0x20000044
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	20000048 	.word	0x20000048

08000ab8 <fsm_setting_run>:
 *      Author: ADMIN
 */

#include "fsm_setting.h"

void fsm_setting_run() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	switch (status) {
 8000abc:	4b7c      	ldr	r3, [pc, #496]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b16      	subs	r3, #22
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	f200 81f3 	bhi.w	8000eae <fsm_setting_run+0x3f6>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <fsm_setting_run+0x18>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000bc9 	.word	0x08000bc9
 8000ad8:	08000ce1 	.word	0x08000ce1
 8000adc:	08000dc9 	.word	0x08000dc9
	case SET_RED_GREEN:
		setLedRed1_Green2();
 8000ae0:	f001 f876 	bl	8001bd0 <setLedRed1_Green2>
		if (timer3_flag == 1) {
 8000ae4:	4b73      	ldr	r3, [pc, #460]	; (8000cb4 <fsm_setting_run+0x1fc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10c      	bne.n	8000b06 <fsm_setting_run+0x4e>
			update7SEG1(setTimeRed1);
 8000aec:	4b72      	ldr	r3, [pc, #456]	; (8000cb8 <fsm_setting_run+0x200>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fd63 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeGreen2);
 8000af6:	4b71      	ldr	r3, [pc, #452]	; (8000cbc <fsm_setting_run+0x204>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fdae 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000b00:	20fa      	movs	r0, #250	; 0xfa
 8000b02:	f000 ff51 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000b06:	4b6e      	ldr	r3, [pc, #440]	; (8000cc0 <fsm_setting_run+0x208>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d10f      	bne.n	8000b2e <fsm_setting_run+0x76>
			timeGreen2 = 3;
 8000b0e:	4b6d      	ldr	r3, [pc, #436]	; (8000cc4 <fsm_setting_run+0x20c>)
 8000b10:	2203      	movs	r2, #3
 8000b12:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 8000b14:	4b6c      	ldr	r3, [pc, #432]	; (8000cc8 <fsm_setting_run+0x210>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 8000b1a:	4b65      	ldr	r3, [pc, #404]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b24:	f000 ff08 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f000 ff21 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000b2e:	f7ff fb0d 	bl	800014c <isButton1Pressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <fsm_setting_run+0x8e>
			status = SET_RED_YELLOW;
 8000b38:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000b3a:	2217      	movs	r2, #23
 8000b3c:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000b3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b42:	f000 fef9 	bl	8001938 <setTimer1>
		}
		if (isButton2Pressed() == 1) {
 8000b46:	f7ff fb13 	bl	8000170 <isButton2Pressed>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d115      	bne.n	8000b7c <fsm_setting_run+0xc4>
			setTimeGreen2++;
 8000b50:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <fsm_setting_run+0x204>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a59      	ldr	r2, [pc, #356]	; (8000cbc <fsm_setting_run+0x204>)
 8000b58:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 8000b5a:	4b58      	ldr	r3, [pc, #352]	; (8000cbc <fsm_setting_run+0x204>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <fsm_setting_run+0x214>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a54      	ldr	r2, [pc, #336]	; (8000cb8 <fsm_setting_run+0x200>)
 8000b66:	6013      	str	r3, [r2, #0]
			update7SEG1(setTimeRed1);
 8000b68:	4b53      	ldr	r3, [pc, #332]	; (8000cb8 <fsm_setting_run+0x200>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fd25 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeGreen2);
 8000b72:	4b52      	ldr	r3, [pc, #328]	; (8000cbc <fsm_setting_run+0x204>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fd70 	bl	800165c <update7SEG2>
		}
		if (isButton3Pressed() == 1) {
 8000b7c:	f7ff fb0a 	bl	8000194 <isButton3Pressed>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f040 8195 	bne.w	8000eb2 <fsm_setting_run+0x3fa>
			timeGreen2 = setTimeGreen2;
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <fsm_setting_run+0x204>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a4d      	ldr	r2, [pc, #308]	; (8000cc4 <fsm_setting_run+0x20c>)
 8000b8e:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 8000b90:	4b4e      	ldr	r3, [pc, #312]	; (8000ccc <fsm_setting_run+0x214>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <fsm_setting_run+0x210>)
 8000b96:	6013      	str	r3, [r2, #0]
			timeGreen1 = setTimeGreen1;
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <fsm_setting_run+0x218>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a4d      	ldr	r2, [pc, #308]	; (8000cd4 <fsm_setting_run+0x21c>)
 8000b9e:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <fsm_setting_run+0x220>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a4d      	ldr	r2, [pc, #308]	; (8000cdc <fsm_setting_run+0x224>)
 8000ba6:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000ba8:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen2 * 1000);
 8000bae:	4b43      	ldr	r3, [pc, #268]	; (8000cbc <fsm_setting_run+0x204>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 febc 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fed5 	bl	8001970 <setTimer2>
		}
		break;
 8000bc6:	e174      	b.n	8000eb2 <fsm_setting_run+0x3fa>
	case SET_RED_YELLOW:
		setLedRed1_Yellow2();
 8000bc8:	f001 f82a 	bl	8001c20 <setLedRed1_Yellow2>
		if (timer3_flag == 1) {
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <fsm_setting_run+0x1fc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10c      	bne.n	8000bee <fsm_setting_run+0x136>
			update7SEG1(setTimeRed1);
 8000bd4:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <fsm_setting_run+0x200>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fcef 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeYellow2);
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <fsm_setting_run+0x214>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fd3a 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000be8:	20fa      	movs	r0, #250	; 0xfa
 8000bea:	f000 fedd 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000bee:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <fsm_setting_run+0x208>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10f      	bne.n	8000c16 <fsm_setting_run+0x15e>
			timeGreen2 = 3;
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <fsm_setting_run+0x20c>)
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <fsm_setting_run+0x210>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_YELLOW;
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 8000c08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c0c:	f000 fe94 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000c10:	2064      	movs	r0, #100	; 0x64
 8000c12:	f000 fead 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000c16:	f7ff fa99 	bl	800014c <isButton1Pressed>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d106      	bne.n	8000c2e <fsm_setting_run+0x176>
			status = SET_GREEN_RED;
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000c22:	2218      	movs	r2, #24
 8000c24:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000c26:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c2a:	f000 fe85 	bl	8001938 <setTimer1>
		}
		if (isButton2Pressed() == 1) {
 8000c2e:	f7ff fa9f 	bl	8000170 <isButton2Pressed>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d115      	bne.n	8000c64 <fsm_setting_run+0x1ac>
			setTimeYellow2++;
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <fsm_setting_run+0x214>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <fsm_setting_run+0x214>)
 8000c40:	6013      	str	r3, [r2, #0]
			setTimeRed1 = setTimeGreen2 + setTimeYellow2;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <fsm_setting_run+0x204>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <fsm_setting_run+0x214>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <fsm_setting_run+0x200>)
 8000c4e:	6013      	str	r3, [r2, #0]
			update7SEG1(setTimeRed1);
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <fsm_setting_run+0x200>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fcb1 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeYellow2);
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <fsm_setting_run+0x214>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fcfc 	bl	800165c <update7SEG2>
		}
		if (isButton3Pressed() == 1) {
 8000c64:	f7ff fa96 	bl	8000194 <isButton3Pressed>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	f040 8123 	bne.w	8000eb6 <fsm_setting_run+0x3fe>
			timeGreen2 = setTimeGreen2;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <fsm_setting_run+0x204>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <fsm_setting_run+0x20c>)
 8000c76:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <fsm_setting_run+0x214>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <fsm_setting_run+0x210>)
 8000c7e:	6013      	str	r3, [r2, #0]
			timeGreen1 = setTimeGreen1;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <fsm_setting_run+0x218>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <fsm_setting_run+0x21c>)
 8000c86:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <fsm_setting_run+0x220>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <fsm_setting_run+0x224>)
 8000c8e:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_YELLOW;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <fsm_setting_run+0x1f8>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow2 * 1000);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <fsm_setting_run+0x214>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fe48 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000ca8:	2064      	movs	r0, #100	; 0x64
 8000caa:	f000 fe61 	bl	8001970 <setTimer2>
		}
		break;
 8000cae:	e102      	b.n	8000eb6 <fsm_setting_run+0x3fe>
 8000cb0:	20000080 	.word	0x20000080
 8000cb4:	200000a0 	.word	0x200000a0
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	20000090 	.word	0x20000090
 8000cc4:	2000003c 	.word	0x2000003c
 8000cc8:	20000040 	.word	0x20000040
 8000ccc:	200000a4 	.word	0x200000a4
 8000cd0:	200000b8 	.word	0x200000b8
 8000cd4:	20000044 	.word	0x20000044
 8000cd8:	200000b0 	.word	0x200000b0
 8000cdc:	20000048 	.word	0x20000048
	case SET_GREEN_RED:
		setLedGreen1_Red2();
 8000ce0:	f000 ffc6 	bl	8001c70 <setLedGreen1_Red2>
		if (timer3_flag == 1) {
 8000ce4:	4b77      	ldr	r3, [pc, #476]	; (8000ec4 <fsm_setting_run+0x40c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10c      	bne.n	8000d06 <fsm_setting_run+0x24e>
			update7SEG1(setTimeGreen1);
 8000cec:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <fsm_setting_run+0x410>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fc63 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeRed2);
 8000cf6:	4b75      	ldr	r3, [pc, #468]	; (8000ecc <fsm_setting_run+0x414>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fcae 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000d00:	20fa      	movs	r0, #250	; 0xfa
 8000d02:	f000 fe51 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000d06:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <fsm_setting_run+0x418>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10f      	bne.n	8000d2e <fsm_setting_run+0x276>
			timeGreen2 = 3;
 8000d0e:	4b71      	ldr	r3, [pc, #452]	; (8000ed4 <fsm_setting_run+0x41c>)
 8000d10:	2203      	movs	r2, #3
 8000d12:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 8000d14:	4b70      	ldr	r3, [pc, #448]	; (8000ed8 <fsm_setting_run+0x420>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	601a      	str	r2, [r3, #0]
			status = AUTO_GREEN_RED;
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <fsm_setting_run+0x424>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000d20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d24:	f000 fe08 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f000 fe21 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000d2e:	f7ff fa0d 	bl	800014c <isButton1Pressed>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d106      	bne.n	8000d46 <fsm_setting_run+0x28e>
			status = SET_YELLOW_RED;
 8000d38:	4b68      	ldr	r3, [pc, #416]	; (8000edc <fsm_setting_run+0x424>)
 8000d3a:	2219      	movs	r2, #25
 8000d3c:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000d3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d42:	f000 fdf9 	bl	8001938 <setTimer1>
		}
		if (isButton2Pressed() == 1) {
 8000d46:	f7ff fa13 	bl	8000170 <isButton2Pressed>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d115      	bne.n	8000d7c <fsm_setting_run+0x2c4>
			setTimeGreen1++;
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <fsm_setting_run+0x410>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <fsm_setting_run+0x410>)
 8000d58:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <fsm_setting_run+0x410>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <fsm_setting_run+0x428>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a59      	ldr	r2, [pc, #356]	; (8000ecc <fsm_setting_run+0x414>)
 8000d66:	6013      	str	r3, [r2, #0]
			update7SEG1(setTimeGreen1);
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <fsm_setting_run+0x410>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fc25 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeRed2);
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <fsm_setting_run+0x414>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fc70 	bl	800165c <update7SEG2>
		}
		if (isButton3Pressed() == 1) {
 8000d7c:	f7ff fa0a 	bl	8000194 <isButton3Pressed>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	f040 8099 	bne.w	8000eba <fsm_setting_run+0x402>
			timeGreen2 = setTimeGreen2;
 8000d88:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <fsm_setting_run+0x42c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <fsm_setting_run+0x41c>)
 8000d8e:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 8000d90:	4b55      	ldr	r3, [pc, #340]	; (8000ee8 <fsm_setting_run+0x430>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a50      	ldr	r2, [pc, #320]	; (8000ed8 <fsm_setting_run+0x420>)
 8000d96:	6013      	str	r3, [r2, #0]
			timeGreen1 = setTimeGreen1;
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <fsm_setting_run+0x410>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a53      	ldr	r2, [pc, #332]	; (8000eec <fsm_setting_run+0x434>)
 8000d9e:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 8000da0:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <fsm_setting_run+0x428>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a52      	ldr	r2, [pc, #328]	; (8000ef0 <fsm_setting_run+0x438>)
 8000da6:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_RED;
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <fsm_setting_run+0x424>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeGreen1 * 1000);
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <fsm_setting_run+0x410>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fdbc 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000dc0:	2064      	movs	r0, #100	; 0x64
 8000dc2:	f000 fdd5 	bl	8001970 <setTimer2>
		}
		break;
 8000dc6:	e078      	b.n	8000eba <fsm_setting_run+0x402>
	case SET_YELLOW_RED:
		setLedYellow1_Red2();
 8000dc8:	f000 ff7a 	bl	8001cc0 <setLedYellow1_Red2>
		if (timer3_flag == 1) {
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <fsm_setting_run+0x40c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10c      	bne.n	8000dee <fsm_setting_run+0x336>
			update7SEG1(setTimeYellow1);
 8000dd4:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <fsm_setting_run+0x428>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fbef 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeRed2);
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <fsm_setting_run+0x414>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fc3a 	bl	800165c <update7SEG2>
			setTimer3(250);
 8000de8:	20fa      	movs	r0, #250	; 0xfa
 8000dea:	f000 fddd 	bl	80019a8 <setTimer3>
		}
		if (timer1_flag == 1) {
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <fsm_setting_run+0x418>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d10f      	bne.n	8000e16 <fsm_setting_run+0x35e>
			timeGreen2 = 3;
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <fsm_setting_run+0x41c>)
 8000df8:	2203      	movs	r2, #3
 8000dfa:	601a      	str	r2, [r3, #0]
			timeYellow2 = 2;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <fsm_setting_run+0x420>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
			status = AUTO_YELLOW_RED;
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <fsm_setting_run+0x424>)
 8000e04:	2205      	movs	r2, #5
 8000e06:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000e08:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e0c:	f000 fd94 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000e10:	2064      	movs	r0, #100	; 0x64
 8000e12:	f000 fdad 	bl	8001970 <setTimer2>
		}
		if (isButton1Pressed() == 1) {
 8000e16:	f7ff f999 	bl	800014c <isButton1Pressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d106      	bne.n	8000e2e <fsm_setting_run+0x376>
			status = SET_RED_GREEN;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <fsm_setting_run+0x424>)
 8000e22:	2216      	movs	r2, #22
 8000e24:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000e26:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e2a:	f000 fd85 	bl	8001938 <setTimer1>
		}
		if (isButton2Pressed() == 1) {
 8000e2e:	f7ff f99f 	bl	8000170 <isButton2Pressed>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d115      	bne.n	8000e64 <fsm_setting_run+0x3ac>
			setTimeYellow1++;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e40:	6013      	str	r3, [r2, #0]
			setTimeRed2 = setTimeGreen1 + setTimeYellow1;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <fsm_setting_run+0x410>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <fsm_setting_run+0x414>)
 8000e4e:	6013      	str	r3, [r2, #0]
			update7SEG1(setTimeYellow1);
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fbb1 	bl	80015bc <update7SEG1>
			update7SEG2(setTimeRed2);
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <fsm_setting_run+0x414>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fbfc 	bl	800165c <update7SEG2>
		}
		if (isButton3Pressed() == 1) {
 8000e64:	f7ff f996 	bl	8000194 <isButton3Pressed>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d127      	bne.n	8000ebe <fsm_setting_run+0x406>
			timeGreen2 = setTimeGreen2;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <fsm_setting_run+0x42c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <fsm_setting_run+0x41c>)
 8000e74:	6013      	str	r3, [r2, #0]
			timeYellow2 = setTimeYellow2;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <fsm_setting_run+0x430>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <fsm_setting_run+0x420>)
 8000e7c:	6013      	str	r3, [r2, #0]
			timeGreen1 = setTimeGreen1;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <fsm_setting_run+0x410>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <fsm_setting_run+0x434>)
 8000e84:	6013      	str	r3, [r2, #0]
			timeYellow1 = setTimeYellow1;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <fsm_setting_run+0x438>)
 8000e8c:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN_RED;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <fsm_setting_run+0x424>)
 8000e90:	2204      	movs	r2, #4
 8000e92:	601a      	str	r2, [r3, #0]
			setTimer1(setTimeYellow1 * 1000);
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <fsm_setting_run+0x428>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fd49 	bl	8001938 <setTimer1>
			setTimer2(100);
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f000 fd62 	bl	8001970 <setTimer2>
		}
		break;
 8000eac:	e007      	b.n	8000ebe <fsm_setting_run+0x406>
	default:
		break;
 8000eae:	bf00      	nop
 8000eb0:	e006      	b.n	8000ec0 <fsm_setting_run+0x408>
		break;
 8000eb2:	bf00      	nop
 8000eb4:	e004      	b.n	8000ec0 <fsm_setting_run+0x408>
		break;
 8000eb6:	bf00      	nop
 8000eb8:	e002      	b.n	8000ec0 <fsm_setting_run+0x408>
		break;
 8000eba:	bf00      	nop
 8000ebc:	e000      	b.n	8000ec0 <fsm_setting_run+0x408>
		break;
 8000ebe:	bf00      	nop
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000a0 	.word	0x200000a0
 8000ec8:	200000b8 	.word	0x200000b8
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	20000090 	.word	0x20000090
 8000ed4:	2000003c 	.word	0x2000003c
 8000ed8:	20000040 	.word	0x20000040
 8000edc:	20000080 	.word	0x20000080
 8000ee0:	200000b0 	.word	0x200000b0
 8000ee4:	200000c0 	.word	0x200000c0
 8000ee8:	200000a4 	.word	0x200000a4
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	20000048 	.word	0x20000048

08000ef4 <display7SEG1>:
 *      Author: ADMIN
 */

#include "led7_segment.h"

void display7SEG1(int num1) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if (num1 < 0) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f2c0 8184 	blt.w	800120c <display7SEG1+0x318>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b09      	cmp	r3, #9
 8000f08:	f200 8182 	bhi.w	8001210 <display7SEG1+0x31c>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <display7SEG1+0x20>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	08000f85 	.word	0x08000f85
 8000f1c:	08000fcd 	.word	0x08000fcd
 8000f20:	08001015 	.word	0x08001015
 8000f24:	0800105d 	.word	0x0800105d
 8000f28:	080010a5 	.word	0x080010a5
 8000f2c:	080010ed 	.word	0x080010ed
 8000f30:	08001135 	.word	0x08001135
 8000f34:	0800117d 	.word	0x0800117d
 8000f38:	080011c5 	.word	0x080011c5
		return;
	}
	switch (num1) {
	case 0:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	48b5      	ldr	r0, [pc, #724]	; (8001218 <display7SEG1+0x324>)
 8000f42:	f001 fa0c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	48b3      	ldr	r0, [pc, #716]	; (8001218 <display7SEG1+0x324>)
 8000f4c:	f001 fa07 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2104      	movs	r1, #4
 8000f54:	48b0      	ldr	r0, [pc, #704]	; (8001218 <display7SEG1+0x324>)
 8000f56:	f001 fa02 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	48ae      	ldr	r0, [pc, #696]	; (8001218 <display7SEG1+0x324>)
 8000f60:	f001 f9fd 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	48ab      	ldr	r0, [pc, #684]	; (8001218 <display7SEG1+0x324>)
 8000f6a:	f001 f9f8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	48a9      	ldr	r0, [pc, #676]	; (8001218 <display7SEG1+0x324>)
 8000f74:	f001 f9f3 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	48a6      	ldr	r0, [pc, #664]	; (8001218 <display7SEG1+0x324>)
 8000f7e:	f001 f9ee 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8000f82:	e146      	b.n	8001212 <display7SEG1+0x31e>
	case 1:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2101      	movs	r1, #1
 8000f88:	48a3      	ldr	r0, [pc, #652]	; (8001218 <display7SEG1+0x324>)
 8000f8a:	f001 f9e8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	48a1      	ldr	r0, [pc, #644]	; (8001218 <display7SEG1+0x324>)
 8000f94:	f001 f9e3 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	489e      	ldr	r0, [pc, #632]	; (8001218 <display7SEG1+0x324>)
 8000f9e:	f001 f9de 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	489c      	ldr	r0, [pc, #624]	; (8001218 <display7SEG1+0x324>)
 8000fa8:	f001 f9d9 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4899      	ldr	r0, [pc, #612]	; (8001218 <display7SEG1+0x324>)
 8000fb2:	f001 f9d4 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4897      	ldr	r0, [pc, #604]	; (8001218 <display7SEG1+0x324>)
 8000fbc:	f001 f9cf 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	4894      	ldr	r0, [pc, #592]	; (8001218 <display7SEG1+0x324>)
 8000fc6:	f001 f9ca 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8000fca:	e122      	b.n	8001212 <display7SEG1+0x31e>
	case 2:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4891      	ldr	r0, [pc, #580]	; (8001218 <display7SEG1+0x324>)
 8000fd2:	f001 f9c4 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2102      	movs	r1, #2
 8000fda:	488f      	ldr	r0, [pc, #572]	; (8001218 <display7SEG1+0x324>)
 8000fdc:	f001 f9bf 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	488c      	ldr	r0, [pc, #560]	; (8001218 <display7SEG1+0x324>)
 8000fe6:	f001 f9ba 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2108      	movs	r1, #8
 8000fee:	488a      	ldr	r0, [pc, #552]	; (8001218 <display7SEG1+0x324>)
 8000ff0:	f001 f9b5 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4887      	ldr	r0, [pc, #540]	; (8001218 <display7SEG1+0x324>)
 8000ffa:	f001 f9b0 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2120      	movs	r1, #32
 8001002:	4885      	ldr	r0, [pc, #532]	; (8001218 <display7SEG1+0x324>)
 8001004:	f001 f9ab 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	; 0x40
 800100c:	4882      	ldr	r0, [pc, #520]	; (8001218 <display7SEG1+0x324>)
 800100e:	f001 f9a6 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8001012:	e0fe      	b.n	8001212 <display7SEG1+0x31e>
	case 3:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2101      	movs	r1, #1
 8001018:	487f      	ldr	r0, [pc, #508]	; (8001218 <display7SEG1+0x324>)
 800101a:	f001 f9a0 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2102      	movs	r1, #2
 8001022:	487d      	ldr	r0, [pc, #500]	; (8001218 <display7SEG1+0x324>)
 8001024:	f001 f99b 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2104      	movs	r1, #4
 800102c:	487a      	ldr	r0, [pc, #488]	; (8001218 <display7SEG1+0x324>)
 800102e:	f001 f996 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2108      	movs	r1, #8
 8001036:	4878      	ldr	r0, [pc, #480]	; (8001218 <display7SEG1+0x324>)
 8001038:	f001 f991 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4875      	ldr	r0, [pc, #468]	; (8001218 <display7SEG1+0x324>)
 8001042:	f001 f98c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2120      	movs	r1, #32
 800104a:	4873      	ldr	r0, [pc, #460]	; (8001218 <display7SEG1+0x324>)
 800104c:	f001 f987 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4870      	ldr	r0, [pc, #448]	; (8001218 <display7SEG1+0x324>)
 8001056:	f001 f982 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800105a:	e0da      	b.n	8001212 <display7SEG1+0x31e>
	case 4:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2101      	movs	r1, #1
 8001060:	486d      	ldr	r0, [pc, #436]	; (8001218 <display7SEG1+0x324>)
 8001062:	f001 f97c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	486b      	ldr	r0, [pc, #428]	; (8001218 <display7SEG1+0x324>)
 800106c:	f001 f977 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4868      	ldr	r0, [pc, #416]	; (8001218 <display7SEG1+0x324>)
 8001076:	f001 f972 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4866      	ldr	r0, [pc, #408]	; (8001218 <display7SEG1+0x324>)
 8001080:	f001 f96d 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	4863      	ldr	r0, [pc, #396]	; (8001218 <display7SEG1+0x324>)
 800108a:	f001 f968 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	4861      	ldr	r0, [pc, #388]	; (8001218 <display7SEG1+0x324>)
 8001094:	f001 f963 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	485e      	ldr	r0, [pc, #376]	; (8001218 <display7SEG1+0x324>)
 800109e:	f001 f95e 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80010a2:	e0b6      	b.n	8001212 <display7SEG1+0x31e>
	case 5:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	485b      	ldr	r0, [pc, #364]	; (8001218 <display7SEG1+0x324>)
 80010aa:	f001 f958 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2102      	movs	r1, #2
 80010b2:	4859      	ldr	r0, [pc, #356]	; (8001218 <display7SEG1+0x324>)
 80010b4:	f001 f953 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	4856      	ldr	r0, [pc, #344]	; (8001218 <display7SEG1+0x324>)
 80010be:	f001 f94e 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2108      	movs	r1, #8
 80010c6:	4854      	ldr	r0, [pc, #336]	; (8001218 <display7SEG1+0x324>)
 80010c8:	f001 f949 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	4851      	ldr	r0, [pc, #324]	; (8001218 <display7SEG1+0x324>)
 80010d2:	f001 f944 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	484f      	ldr	r0, [pc, #316]	; (8001218 <display7SEG1+0x324>)
 80010dc:	f001 f93f 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	484c      	ldr	r0, [pc, #304]	; (8001218 <display7SEG1+0x324>)
 80010e6:	f001 f93a 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80010ea:	e092      	b.n	8001212 <display7SEG1+0x31e>
	case 6:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2101      	movs	r1, #1
 80010f0:	4849      	ldr	r0, [pc, #292]	; (8001218 <display7SEG1+0x324>)
 80010f2:	f001 f934 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	4847      	ldr	r0, [pc, #284]	; (8001218 <display7SEG1+0x324>)
 80010fc:	f001 f92f 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4844      	ldr	r0, [pc, #272]	; (8001218 <display7SEG1+0x324>)
 8001106:	f001 f92a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	4842      	ldr	r0, [pc, #264]	; (8001218 <display7SEG1+0x324>)
 8001110:	f001 f925 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	483f      	ldr	r0, [pc, #252]	; (8001218 <display7SEG1+0x324>)
 800111a:	f001 f920 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	483d      	ldr	r0, [pc, #244]	; (8001218 <display7SEG1+0x324>)
 8001124:	f001 f91b 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	483a      	ldr	r0, [pc, #232]	; (8001218 <display7SEG1+0x324>)
 800112e:	f001 f916 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8001132:	e06e      	b.n	8001212 <display7SEG1+0x31e>
	case 7:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2101      	movs	r1, #1
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <display7SEG1+0x324>)
 800113a:	f001 f910 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	4835      	ldr	r0, [pc, #212]	; (8001218 <display7SEG1+0x324>)
 8001144:	f001 f90b 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2104      	movs	r1, #4
 800114c:	4832      	ldr	r0, [pc, #200]	; (8001218 <display7SEG1+0x324>)
 800114e:	f001 f906 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2108      	movs	r1, #8
 8001156:	4830      	ldr	r0, [pc, #192]	; (8001218 <display7SEG1+0x324>)
 8001158:	f001 f901 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	482d      	ldr	r0, [pc, #180]	; (8001218 <display7SEG1+0x324>)
 8001162:	f001 f8fc 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	482b      	ldr	r0, [pc, #172]	; (8001218 <display7SEG1+0x324>)
 800116c:	f001 f8f7 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <display7SEG1+0x324>)
 8001176:	f001 f8f2 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800117a:	e04a      	b.n	8001212 <display7SEG1+0x31e>
	case 8:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	4825      	ldr	r0, [pc, #148]	; (8001218 <display7SEG1+0x324>)
 8001182:	f001 f8ec 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <display7SEG1+0x324>)
 800118c:	f001 f8e7 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	4820      	ldr	r0, [pc, #128]	; (8001218 <display7SEG1+0x324>)
 8001196:	f001 f8e2 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	481e      	ldr	r0, [pc, #120]	; (8001218 <display7SEG1+0x324>)
 80011a0:	f001 f8dd 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <display7SEG1+0x324>)
 80011aa:	f001 f8d8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <display7SEG1+0x324>)
 80011b4:	f001 f8d3 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <display7SEG1+0x324>)
 80011be:	f001 f8ce 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80011c2:	e026      	b.n	8001212 <display7SEG1+0x31e>
	case 9:
		HAL_GPIO_WritePin(SEG_A1_GPIO_Port, SEG_A1_Pin, RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2101      	movs	r1, #1
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <display7SEG1+0x324>)
 80011ca:	f001 f8c8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B1_GPIO_Port, SEG_B1_Pin, RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <display7SEG1+0x324>)
 80011d4:	f001 f8c3 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C1_GPIO_Port, SEG_C1_Pin, RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <display7SEG1+0x324>)
 80011de:	f001 f8be 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D1_GPIO_Port, SEG_D1_Pin, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <display7SEG1+0x324>)
 80011e8:	f001 f8b9 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E1_GPIO_Port, SEG_E1_Pin, SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2110      	movs	r1, #16
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <display7SEG1+0x324>)
 80011f2:	f001 f8b4 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F1_GPIO_Port, SEG_F1_Pin, RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <display7SEG1+0x324>)
 80011fc:	f001 f8af 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G1_GPIO_Port, SEG_G1_Pin, RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <display7SEG1+0x324>)
 8001206:	f001 f8aa 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800120a:	e002      	b.n	8001212 <display7SEG1+0x31e>
		return;
 800120c:	bf00      	nop
 800120e:	e000      	b.n	8001212 <display7SEG1+0x31e>
	default:
		break;
 8001210:	bf00      	nop
	}
}
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010c00 	.word	0x40010c00

0800121c <display7SEG2>:

void display7SEG2(int num2) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if (num2 < 0) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f2c0 81c0 	blt.w	80015ac <display7SEG2+0x390>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b09      	cmp	r3, #9
 8001230:	f200 81be 	bhi.w	80015b0 <display7SEG2+0x394>
 8001234:	a201      	add	r2, pc, #4	; (adr r2, 800123c <display7SEG2+0x20>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	08001265 	.word	0x08001265
 8001240:	080012b9 	.word	0x080012b9
 8001244:	0800130d 	.word	0x0800130d
 8001248:	08001361 	.word	0x08001361
 800124c:	080013b5 	.word	0x080013b5
 8001250:	08001409 	.word	0x08001409
 8001254:	0800145d 	.word	0x0800145d
 8001258:	080014b1 	.word	0x080014b1
 800125c:	08001505 	.word	0x08001505
 8001260:	08001559 	.word	0x08001559
		return;
	}
	switch (num2) {
	case 0:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	48d3      	ldr	r0, [pc, #844]	; (80015b8 <display7SEG2+0x39c>)
 800126a:	f001 f878 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	48d0      	ldr	r0, [pc, #832]	; (80015b8 <display7SEG2+0x39c>)
 8001276:	f001 f872 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	48cd      	ldr	r0, [pc, #820]	; (80015b8 <display7SEG2+0x39c>)
 8001282:	f001 f86c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128c:	48ca      	ldr	r0, [pc, #808]	; (80015b8 <display7SEG2+0x39c>)
 800128e:	f001 f866 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001298:	48c7      	ldr	r0, [pc, #796]	; (80015b8 <display7SEG2+0x39c>)
 800129a:	f001 f860 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a4:	48c4      	ldr	r0, [pc, #784]	; (80015b8 <display7SEG2+0x39c>)
 80012a6:	f001 f85a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	48c1      	ldr	r0, [pc, #772]	; (80015b8 <display7SEG2+0x39c>)
 80012b2:	f001 f854 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80012b6:	e17c      	b.n	80015b2 <display7SEG2+0x396>
	case 1:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	48be      	ldr	r0, [pc, #760]	; (80015b8 <display7SEG2+0x39c>)
 80012be:	f001 f84e 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c8:	48bb      	ldr	r0, [pc, #748]	; (80015b8 <display7SEG2+0x39c>)
 80012ca:	f001 f848 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	48b8      	ldr	r0, [pc, #736]	; (80015b8 <display7SEG2+0x39c>)
 80012d6:	f001 f842 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	48b5      	ldr	r0, [pc, #724]	; (80015b8 <display7SEG2+0x39c>)
 80012e2:	f001 f83c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	48b2      	ldr	r0, [pc, #712]	; (80015b8 <display7SEG2+0x39c>)
 80012ee:	f001 f836 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f8:	48af      	ldr	r0, [pc, #700]	; (80015b8 <display7SEG2+0x39c>)
 80012fa:	f001 f830 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001304:	48ac      	ldr	r0, [pc, #688]	; (80015b8 <display7SEG2+0x39c>)
 8001306:	f001 f82a 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800130a:	e152      	b.n	80015b2 <display7SEG2+0x396>
	case 2:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	48a9      	ldr	r0, [pc, #676]	; (80015b8 <display7SEG2+0x39c>)
 8001312:	f001 f824 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	48a6      	ldr	r0, [pc, #664]	; (80015b8 <display7SEG2+0x39c>)
 800131e:	f001 f81e 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	48a3      	ldr	r0, [pc, #652]	; (80015b8 <display7SEG2+0x39c>)
 800132a:	f001 f818 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	48a0      	ldr	r0, [pc, #640]	; (80015b8 <display7SEG2+0x39c>)
 8001336:	f001 f812 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	489d      	ldr	r0, [pc, #628]	; (80015b8 <display7SEG2+0x39c>)
 8001342:	f001 f80c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	489a      	ldr	r0, [pc, #616]	; (80015b8 <display7SEG2+0x39c>)
 800134e:	f001 f806 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	4897      	ldr	r0, [pc, #604]	; (80015b8 <display7SEG2+0x39c>)
 800135a:	f001 f800 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800135e:	e128      	b.n	80015b2 <display7SEG2+0x396>
	case 3:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	4894      	ldr	r0, [pc, #592]	; (80015b8 <display7SEG2+0x39c>)
 8001366:	f000 fffa 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	4891      	ldr	r0, [pc, #580]	; (80015b8 <display7SEG2+0x39c>)
 8001372:	f000 fff4 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	488e      	ldr	r0, [pc, #568]	; (80015b8 <display7SEG2+0x39c>)
 800137e:	f000 ffee 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	488b      	ldr	r0, [pc, #556]	; (80015b8 <display7SEG2+0x39c>)
 800138a:	f000 ffe8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001394:	4888      	ldr	r0, [pc, #544]	; (80015b8 <display7SEG2+0x39c>)
 8001396:	f000 ffe2 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4885      	ldr	r0, [pc, #532]	; (80015b8 <display7SEG2+0x39c>)
 80013a2:	f000 ffdc 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ac:	4882      	ldr	r0, [pc, #520]	; (80015b8 <display7SEG2+0x39c>)
 80013ae:	f000 ffd6 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80013b2:	e0fe      	b.n	80015b2 <display7SEG2+0x396>
	case 4:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	487f      	ldr	r0, [pc, #508]	; (80015b8 <display7SEG2+0x39c>)
 80013ba:	f000 ffd0 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	487c      	ldr	r0, [pc, #496]	; (80015b8 <display7SEG2+0x39c>)
 80013c6:	f000 ffca 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	4879      	ldr	r0, [pc, #484]	; (80015b8 <display7SEG2+0x39c>)
 80013d2:	f000 ffc4 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013dc:	4876      	ldr	r0, [pc, #472]	; (80015b8 <display7SEG2+0x39c>)
 80013de:	f000 ffbe 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e8:	4873      	ldr	r0, [pc, #460]	; (80015b8 <display7SEG2+0x39c>)
 80013ea:	f000 ffb8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f4:	4870      	ldr	r0, [pc, #448]	; (80015b8 <display7SEG2+0x39c>)
 80013f6:	f000 ffb2 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001400:	486d      	ldr	r0, [pc, #436]	; (80015b8 <display7SEG2+0x39c>)
 8001402:	f000 ffac 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8001406:	e0d4      	b.n	80015b2 <display7SEG2+0x396>
	case 5:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	486a      	ldr	r0, [pc, #424]	; (80015b8 <display7SEG2+0x39c>)
 800140e:	f000 ffa6 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	4867      	ldr	r0, [pc, #412]	; (80015b8 <display7SEG2+0x39c>)
 800141a:	f000 ffa0 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	4864      	ldr	r0, [pc, #400]	; (80015b8 <display7SEG2+0x39c>)
 8001426:	f000 ff9a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	4861      	ldr	r0, [pc, #388]	; (80015b8 <display7SEG2+0x39c>)
 8001432:	f000 ff94 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143c:	485e      	ldr	r0, [pc, #376]	; (80015b8 <display7SEG2+0x39c>)
 800143e:	f000 ff8e 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001448:	485b      	ldr	r0, [pc, #364]	; (80015b8 <display7SEG2+0x39c>)
 800144a:	f000 ff88 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001454:	4858      	ldr	r0, [pc, #352]	; (80015b8 <display7SEG2+0x39c>)
 8001456:	f000 ff82 	bl	800235e <HAL_GPIO_WritePin>
		break;
 800145a:	e0aa      	b.n	80015b2 <display7SEG2+0x396>
	case 6:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4855      	ldr	r0, [pc, #340]	; (80015b8 <display7SEG2+0x39c>)
 8001462:	f000 ff7c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146c:	4852      	ldr	r0, [pc, #328]	; (80015b8 <display7SEG2+0x39c>)
 800146e:	f000 ff76 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	484f      	ldr	r0, [pc, #316]	; (80015b8 <display7SEG2+0x39c>)
 800147a:	f000 ff70 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	484c      	ldr	r0, [pc, #304]	; (80015b8 <display7SEG2+0x39c>)
 8001486:	f000 ff6a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4849      	ldr	r0, [pc, #292]	; (80015b8 <display7SEG2+0x39c>)
 8001492:	f000 ff64 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4846      	ldr	r0, [pc, #280]	; (80015b8 <display7SEG2+0x39c>)
 800149e:	f000 ff5e 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a8:	4843      	ldr	r0, [pc, #268]	; (80015b8 <display7SEG2+0x39c>)
 80014aa:	f000 ff58 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80014ae:	e080      	b.n	80015b2 <display7SEG2+0x396>
	case 7:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	4840      	ldr	r0, [pc, #256]	; (80015b8 <display7SEG2+0x39c>)
 80014b6:	f000 ff52 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c0:	483d      	ldr	r0, [pc, #244]	; (80015b8 <display7SEG2+0x39c>)
 80014c2:	f000 ff4c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	483a      	ldr	r0, [pc, #232]	; (80015b8 <display7SEG2+0x39c>)
 80014ce:	f000 ff46 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <display7SEG2+0x39c>)
 80014da:	f000 ff40 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e4:	4834      	ldr	r0, [pc, #208]	; (80015b8 <display7SEG2+0x39c>)
 80014e6:	f000 ff3a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	4831      	ldr	r0, [pc, #196]	; (80015b8 <display7SEG2+0x39c>)
 80014f2:	f000 ff34 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <display7SEG2+0x39c>)
 80014fe:	f000 ff2e 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8001502:	e056      	b.n	80015b2 <display7SEG2+0x396>
	case 8:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	482b      	ldr	r0, [pc, #172]	; (80015b8 <display7SEG2+0x39c>)
 800150a:	f000 ff28 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	4828      	ldr	r0, [pc, #160]	; (80015b8 <display7SEG2+0x39c>)
 8001516:	f000 ff22 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4825      	ldr	r0, [pc, #148]	; (80015b8 <display7SEG2+0x39c>)
 8001522:	f000 ff1c 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	4822      	ldr	r0, [pc, #136]	; (80015b8 <display7SEG2+0x39c>)
 800152e:	f000 ff16 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <display7SEG2+0x39c>)
 800153a:	f000 ff10 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <display7SEG2+0x39c>)
 8001546:	f000 ff0a 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <display7SEG2+0x39c>)
 8001552:	f000 ff04 	bl	800235e <HAL_GPIO_WritePin>
		break;
 8001556:	e02c      	b.n	80015b2 <display7SEG2+0x396>
	case 9:
		HAL_GPIO_WritePin(SEG_A2_GPIO_Port, SEG_A2_Pin, RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	4816      	ldr	r0, [pc, #88]	; (80015b8 <display7SEG2+0x39c>)
 800155e:	f000 fefe 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B2_GPIO_Port, SEG_B2_Pin, RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <display7SEG2+0x39c>)
 800156a:	f000 fef8 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C2_GPIO_Port, SEG_C2_Pin, RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <display7SEG2+0x39c>)
 8001576:	f000 fef2 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D2_GPIO_Port, SEG_D2_Pin, RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <display7SEG2+0x39c>)
 8001582:	f000 feec 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E2_GPIO_Port, SEG_E2_Pin, SET);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <display7SEG2+0x39c>)
 800158e:	f000 fee6 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F2_GPIO_Port, SEG_F2_Pin, RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <display7SEG2+0x39c>)
 800159a:	f000 fee0 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G2_GPIO_Port, SEG_G2_Pin, RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <display7SEG2+0x39c>)
 80015a6:	f000 feda 	bl	800235e <HAL_GPIO_WritePin>
		break;
 80015aa:	e002      	b.n	80015b2 <display7SEG2+0x396>
		return;
 80015ac:	bf00      	nop
 80015ae:	e000      	b.n	80015b2 <display7SEG2+0x396>
	default:
		break;
 80015b0:	bf00      	nop
	}
}
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010c00 	.word	0x40010c00

080015bc <update7SEG1>:

int index1 = 0;
int index2 = 0;
void update7SEG1(int time1) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	int timeLed1 = time1 / 10;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a22      	ldr	r2, [pc, #136]	; (8001650 <update7SEG1+0x94>)
 80015c8:	fb82 1203 	smull	r1, r2, r2, r3
 80015cc:	1092      	asrs	r2, r2, #2
 80015ce:	17db      	asrs	r3, r3, #31
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
	int timeLed2 = time1 % 10;
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <update7SEG1+0x94>)
 80015d8:	fb83 1302 	smull	r1, r3, r3, r2
 80015dc:	1099      	asrs	r1, r3, #2
 80015de:	17d3      	asrs	r3, r2, #31
 80015e0:	1ac9      	subs	r1, r1, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	60bb      	str	r3, [r7, #8]
	switch (index1) {
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <update7SEG1+0x98>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <update7SEG1+0x40>
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d013      	beq.n	8001622 <update7SEG1+0x66>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG1(timeLed2);
		index1 = 0;
		break;
	default:
		break;
 80015fa:	e025      	b.n	8001648 <update7SEG1+0x8c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <update7SEG1+0x9c>)
 8001604:	f000 feab 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <update7SEG1+0x9c>)
 8001610:	f000 fea5 	bl	800235e <HAL_GPIO_WritePin>
		display7SEG1(timeLed1);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fc6d 	bl	8000ef4 <display7SEG1>
		index1 = 1;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <update7SEG1+0x98>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
		break;
 8001620:	e012      	b.n	8001648 <update7SEG1+0x8c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <update7SEG1+0x9c>)
 800162a:	f000 fe98 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <update7SEG1+0x9c>)
 8001636:	f000 fe92 	bl	800235e <HAL_GPIO_WritePin>
		display7SEG1(timeLed2);
 800163a:	68b8      	ldr	r0, [r7, #8]
 800163c:	f7ff fc5a 	bl	8000ef4 <display7SEG1>
		index1 = 0;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <update7SEG1+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		break;
 8001646:	bf00      	nop
	}
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	66666667 	.word	0x66666667
 8001654:	20000084 	.word	0x20000084
 8001658:	40010800 	.word	0x40010800

0800165c <update7SEG2>:

void update7SEG2(int time2) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	int timeLed3 = time2 / 10;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <update7SEG2+0x94>)
 8001668:	fb82 1203 	smull	r1, r2, r2, r3
 800166c:	1092      	asrs	r2, r2, #2
 800166e:	17db      	asrs	r3, r3, #31
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
	int timeLed4 = time2 % 10;
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <update7SEG2+0x94>)
 8001678:	fb83 1302 	smull	r1, r3, r3, r2
 800167c:	1099      	asrs	r1, r3, #2
 800167e:	17d3      	asrs	r3, r2, #31
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	460b      	mov	r3, r1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	60bb      	str	r3, [r7, #8]
	switch (index2) {
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <update7SEG2+0x98>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <update7SEG2+0x40>
 8001696:	2b01      	cmp	r3, #1
 8001698:	d013      	beq.n	80016c2 <update7SEG2+0x66>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG2(timeLed4);
		index2 = 0;
		break;
	default:
		break;
 800169a:	e025      	b.n	80016e8 <update7SEG2+0x8c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4815      	ldr	r0, [pc, #84]	; (80016f8 <update7SEG2+0x9c>)
 80016a4:	f000 fe5b 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <update7SEG2+0x9c>)
 80016b0:	f000 fe55 	bl	800235e <HAL_GPIO_WritePin>
		display7SEG2(timeLed3);
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fdb1 	bl	800121c <display7SEG2>
		index2 = 1;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <update7SEG2+0x98>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
		break;
 80016c0:	e012      	b.n	80016e8 <update7SEG2+0x8c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <update7SEG2+0x9c>)
 80016ca:	f000 fe48 	bl	800235e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <update7SEG2+0x9c>)
 80016d6:	f000 fe42 	bl	800235e <HAL_GPIO_WritePin>
		display7SEG2(timeLed4);
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f7ff fd9e 	bl	800121c <display7SEG2>
		index2 = 0;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <update7SEG2+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
		break;
 80016e6:	bf00      	nop
	}
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	66666667 	.word	0x66666667
 80016f4:	20000088 	.word	0x20000088
 80016f8:	40010800 	.word	0x40010800

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001700:	f000 fb2c 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001704:	f000 f816 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001708:	f000 f89c 	bl	8001844 <MX_GPIO_Init>
  MX_TIM2_Init();
 800170c:	f000 f84e 	bl	80017ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <main+0x30>)
 8001712:	f001 fa69 	bl	8002be8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	status = INIT;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <main+0x34>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  while (1)
  {
		fsm_automatic_run();
 800171c:	f7fe fe5a 	bl	80003d4 <fsm_automatic_run>
		fsm_manual_run();
 8001720:	f7ff f8ee 	bl	8000900 <fsm_manual_run>
		fsm_setting_run();
 8001724:	f7ff f9c8 	bl	8000ab8 <fsm_setting_run>
		fsm_automatic_run();
 8001728:	e7f8      	b.n	800171c <main+0x20>
 800172a:	bf00      	nop
 800172c:	200000d4 	.word	0x200000d4
 8001730:	20000080 	.word	0x20000080

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b090      	sub	sp, #64	; 0x40
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	2228      	movs	r2, #40	; 0x28
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fe00 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175e:	2310      	movs	r3, #16
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fe10 	bl	8002390 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001776:	f000 f8d9 	bl	800192c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f001 f87c 	bl	8002890 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800179e:	f000 f8c5 	bl	800192c <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3740      	adds	r7, #64	; 0x40
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_TIM2_Init+0x94>)
 80017d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_TIM2_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_TIM2_Init+0x94>)
 80017e0:	2209      	movs	r2, #9
 80017e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_TIM2_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM2_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_TIM2_Init+0x94>)
 80017f2:	f001 f9a9 	bl	8002b48 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017fc:	f000 f896 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM2_Init+0x94>)
 800180e:	f001 fb27 	bl	8002e60 <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001818:	f000 f888 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_TIM2_Init+0x94>)
 800182a:	f001 fcff 	bl	800322c <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001834:	f000 f87a 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200000d4 	.word	0x200000d4

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <MX_GPIO_Init+0xbc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <MX_GPIO_Init+0xbc>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <MX_GPIO_Init+0xbc>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <MX_GPIO_Init+0xbc>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <MX_GPIO_Init+0xbc>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_GPIO_Init+0xbc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 51ff 	mov.w	r1, #8160	; 0x1fe0
 800188e:	481d      	ldr	r0, [pc, #116]	; (8001904 <MX_GPIO_Init+0xc0>)
 8001890:	f000 fd65 	bl	800235e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A1_Pin|SEG_B1_Pin|SEG_C1_Pin|SEG_D2_Pin
 8001894:	2200      	movs	r2, #0
 8001896:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800189a:	481b      	ldr	r0, [pc, #108]	; (8001908 <MX_GPIO_Init+0xc4>)
 800189c:	f000 fd5f 	bl	800235e <HAL_GPIO_WritePin>
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_A2_Pin
                          |SEG_B2_Pin|SEG_C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80018a0:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 80018a4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2302      	movs	r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <MX_GPIO_Init+0xc0>)
 80018ba:	f000 fbbf 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A1_Pin SEG_B1_Pin SEG_C1_Pin SEG_D2_Pin
                           SEG_E2_Pin SEG_F2_Pin SEG_G2_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_A2_Pin
                           SEG_B2_Pin SEG_C2_Pin */
  GPIO_InitStruct.Pin = SEG_A1_Pin|SEG_B1_Pin|SEG_C1_Pin|SEG_D2_Pin
 80018be:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80018c2:	60bb      	str	r3, [r7, #8]
                          |SEG_E2_Pin|SEG_F2_Pin|SEG_G2_Pin|SEG_D1_Pin
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_A2_Pin
                          |SEG_B2_Pin|SEG_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2302      	movs	r3, #2
 80018ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_GPIO_Init+0xc4>)
 80018d8:	f000 fbb0 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80018dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_GPIO_Init+0xc0>)
 80018f2:	f000 fba3 	bl	800203c <HAL_GPIO_Init>

}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00

0800190c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	timerRun();
 8001914:	f000 f864 	bl	80019e0 <timerRun>
	getKey1Input();
 8001918:	f7fe fc72 	bl	8000200 <getKey1Input>
	getKey2Input();
 800191c:	f7fe fcbe 	bl	800029c <getKey2Input>
	getKey3Input();
 8001920:	f7fe fd0a 	bl	8000338 <getKey3Input>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>
	...

08001938 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration) {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <setTimer1+0x2c>)
 8001944:	fb82 1203 	smull	r1, r2, r2, r3
 8001948:	1092      	asrs	r2, r2, #2
 800194a:	17db      	asrs	r3, r3, #31
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a06      	ldr	r2, [pc, #24]	; (8001968 <setTimer1+0x30>)
 8001950:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <setTimer1+0x34>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	66666667 	.word	0x66666667
 8001968:	2000008c 	.word	0x2000008c
 800196c:	20000090 	.word	0x20000090

08001970 <setTimer2>:

void setTimer2(int duration) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <setTimer2+0x2c>)
 800197c:	fb82 1203 	smull	r1, r2, r2, r3
 8001980:	1092      	asrs	r2, r2, #2
 8001982:	17db      	asrs	r3, r3, #31
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <setTimer2+0x30>)
 8001988:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <setTimer2+0x34>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	66666667 	.word	0x66666667
 80019a0:	20000094 	.word	0x20000094
 80019a4:	20000098 	.word	0x20000098

080019a8 <setTimer3>:

void setTimer3(int duration) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TICK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <setTimer3+0x2c>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1092      	asrs	r2, r2, #2
 80019ba:	17db      	asrs	r3, r3, #31
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <setTimer3+0x30>)
 80019c0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <setTimer3+0x34>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	66666667 	.word	0x66666667
 80019d8:	2000009c 	.word	0x2000009c
 80019dc:	200000a0 	.word	0x200000a0

080019e0 <timerRun>:

void timerRun() {
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <timerRun+0x6c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dd0b      	ble.n	8001a04 <timerRun+0x24>
		timer1_counter--;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <timerRun+0x6c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <timerRun+0x6c>)
 80019f4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <timerRun+0x6c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc02      	bgt.n	8001a04 <timerRun+0x24>
			timer1_flag = 1;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <timerRun+0x70>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <timerRun+0x74>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	dd0b      	ble.n	8001a24 <timerRun+0x44>
		timer2_counter--;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <timerRun+0x74>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <timerRun+0x74>)
 8001a14:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <timerRun+0x74>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dc02      	bgt.n	8001a24 <timerRun+0x44>
			timer2_flag = 1;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <timerRun+0x78>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <timerRun+0x7c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dd0b      	ble.n	8001a44 <timerRun+0x64>
		timer3_counter--;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <timerRun+0x7c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <timerRun+0x7c>)
 8001a34:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <timerRun+0x7c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dc02      	bgt.n	8001a44 <timerRun+0x64>
			timer3_flag = 1;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <timerRun+0x80>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	2000008c 	.word	0x2000008c
 8001a50:	20000090 	.word	0x20000090
 8001a54:	20000094 	.word	0x20000094
 8001a58:	20000098 	.word	0x20000098
 8001a5c:	2000009c 	.word	0x2000009c
 8001a60:	200000a0 	.word	0x200000a0

08001a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_MspInit+0x60>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_MspInit+0x60>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d113      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	201c      	movs	r0, #28
 8001af8:	f000 fa69 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001afc:	201c      	movs	r0, #28
 8001afe:	f000 fa82 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f000 f947 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM2_IRQHandler+0x10>)
 8001b66:	f001 f88b 	bl	8002c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000d4 	.word	0x200000d4

08001b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <clearAllLed>:
 *      Author: ADMIN
 */

#include "traffic_light.h"

void clearAllLed() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2120      	movs	r1, #32
 8001b88:	4810      	ldr	r0, [pc, #64]	; (8001bcc <clearAllLed+0x4c>)
 8001b8a:	f000 fbe8 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <clearAllLed+0x4c>)
 8001b94:	f000 fbe3 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <clearAllLed+0x4c>)
 8001b9e:	f000 fbde 	bl	800235e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <clearAllLed+0x4c>)
 8001baa:	f000 fbd8 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <clearAllLed+0x4c>)
 8001bb6:	f000 fbd2 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <clearAllLed+0x4c>)
 8001bc2:	f000 fbcc 	bl	800235e <HAL_GPIO_WritePin>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <setLedRed1_Green2>:

void setLedRed1_Green2() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001bda:	f000 fbc0 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	480e      	ldr	r0, [pc, #56]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001be4:	f000 fbbb 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001bee:	f000 fbb6 	bl	800235e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001bfa:	f000 fbb0 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001c06:	f000 fbaa 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <setLedRed1_Green2+0x4c>)
 8001c12:	f000 fba4 	bl	800235e <HAL_GPIO_WritePin>
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40010800 	.word	0x40010800

08001c20 <setLedRed1_Yellow2>:

void setLedRed1_Yellow2() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2120      	movs	r1, #32
 8001c28:	4810      	ldr	r0, [pc, #64]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c2a:	f000 fb98 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c34:	f000 fb93 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c3e:	f000 fb8e 	bl	800235e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c4a:	f000 fb88 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c56:	f000 fb82 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <setLedRed1_Yellow2+0x4c>)
 8001c62:	f000 fb7c 	bl	800235e <HAL_GPIO_WritePin>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40010800 	.word	0x40010800

08001c70 <setLedGreen1_Red2>:

void setLedGreen1_Red2() {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2120      	movs	r1, #32
 8001c78:	4810      	ldr	r0, [pc, #64]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001c7a:	f000 fb70 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001c84:	f000 fb6b 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001c8e:	f000 fb66 	bl	800235e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001c9a:	f000 fb60 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001ca6:	f000 fb5a 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <setLedGreen1_Red2+0x4c>)
 8001cb2:	f000 fb54 	bl	800235e <HAL_GPIO_WritePin>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <setLedYellow1_Red2>:

void setLedYellow1_Red2() {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4810      	ldr	r0, [pc, #64]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001cca:	f000 fb48 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	480e      	ldr	r0, [pc, #56]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001cd4:	f000 fb43 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	480b      	ldr	r0, [pc, #44]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001cde:	f000 fb3e 	bl	800235e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001cea:	f000 fb38 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001cf6:	f000 fb32 	bl	800235e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <setLedYellow1_Red2+0x4c>)
 8001d02:	f000 fb2c 	bl	800235e <HAL_GPIO_WritePin>
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40010800 	.word	0x40010800

08001d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d10:	f7ff ff30 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d16:	490c      	ldr	r1, [pc, #48]	; (8001d48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d2c:	4c09      	ldr	r4, [pc, #36]	; (8001d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f001 fae1 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3e:	f7ff fcdd 	bl	80016fc <main>
  bx lr
 8001d42:	4770      	bx	lr
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001d4c:	0800339c 	.word	0x0800339c
  ldr r2, =_sbss
 8001d50:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001d54:	20000120 	.word	0x20000120

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_Init+0x28>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_Init+0x28>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 f923 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	200f      	movs	r0, #15
 8001d74:	f000 f808 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff fe74 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f93b 	bl	8002022 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f903 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_InitTick+0x5c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000004c 	.word	0x2000004c
 8001de0:	20000054 	.word	0x20000054
 8001de4:	20000050 	.word	0x20000050

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x20>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a03      	ldr	r2, [pc, #12]	; (8001e08 <HAL_IncTick+0x20>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	20000054 	.word	0x20000054
 8001e08:	2000011c 	.word	0x2000011c

08001e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	2000011c 	.word	0x2000011c

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <__NVIC_EnableIRQ+0x34>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff90 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff2d 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff42 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff90 	bl	8001f10 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5f 	bl	8001ebc <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff35 	bl	8001e84 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e148      	b.n	80022e2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002050:	2201      	movs	r2, #1
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8137 	bne.w	80022dc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4aa3      	ldr	r2, [pc, #652]	; (8002300 <HAL_GPIO_Init+0x2c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d05e      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002078:	4aa1      	ldr	r2, [pc, #644]	; (8002300 <HAL_GPIO_Init+0x2c4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d875      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 800207e:	4aa1      	ldr	r2, [pc, #644]	; (8002304 <HAL_GPIO_Init+0x2c8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d058      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002084:	4a9f      	ldr	r2, [pc, #636]	; (8002304 <HAL_GPIO_Init+0x2c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d86f      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 800208a:	4a9f      	ldr	r2, [pc, #636]	; (8002308 <HAL_GPIO_Init+0x2cc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d052      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002090:	4a9d      	ldr	r2, [pc, #628]	; (8002308 <HAL_GPIO_Init+0x2cc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d869      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 8002096:	4a9d      	ldr	r2, [pc, #628]	; (800230c <HAL_GPIO_Init+0x2d0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04c      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 800209c:	4a9b      	ldr	r2, [pc, #620]	; (800230c <HAL_GPIO_Init+0x2d0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d863      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020a2:	4a9b      	ldr	r2, [pc, #620]	; (8002310 <HAL_GPIO_Init+0x2d4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d046      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 80020a8:	4a99      	ldr	r2, [pc, #612]	; (8002310 <HAL_GPIO_Init+0x2d4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d85d      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d82a      	bhi.n	8002108 <HAL_GPIO_Init+0xcc>
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d859      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <HAL_GPIO_Init+0x80>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	08002137 	.word	0x08002137
 80020c0:	08002111 	.word	0x08002111
 80020c4:	08002123 	.word	0x08002123
 80020c8:	08002165 	.word	0x08002165
 80020cc:	0800216b 	.word	0x0800216b
 80020d0:	0800216b 	.word	0x0800216b
 80020d4:	0800216b 	.word	0x0800216b
 80020d8:	0800216b 	.word	0x0800216b
 80020dc:	0800216b 	.word	0x0800216b
 80020e0:	0800216b 	.word	0x0800216b
 80020e4:	0800216b 	.word	0x0800216b
 80020e8:	0800216b 	.word	0x0800216b
 80020ec:	0800216b 	.word	0x0800216b
 80020f0:	0800216b 	.word	0x0800216b
 80020f4:	0800216b 	.word	0x0800216b
 80020f8:	0800216b 	.word	0x0800216b
 80020fc:	0800216b 	.word	0x0800216b
 8002100:	08002119 	.word	0x08002119
 8002104:	0800212d 	.word	0x0800212d
 8002108:	4a82      	ldr	r2, [pc, #520]	; (8002314 <HAL_GPIO_Init+0x2d8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210e:	e02c      	b.n	800216a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e029      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	623b      	str	r3, [r7, #32]
          break;
 8002120:	e024      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	3308      	adds	r3, #8
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e01f      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	330c      	adds	r3, #12
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e01a      	b.n	800216c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213e:	2304      	movs	r3, #4
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e013      	b.n	800216c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	611a      	str	r2, [r3, #16]
          break;
 8002156:	e009      	b.n	800216c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002158:	2308      	movs	r3, #8
 800215a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	615a      	str	r2, [r3, #20]
          break;
 8002162:	e003      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x130>
          break;
 800216a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	d801      	bhi.n	8002176 <HAL_GPIO_Init+0x13a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	e001      	b.n	800217a <HAL_GPIO_Init+0x13e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d802      	bhi.n	8002188 <HAL_GPIO_Init+0x14c>
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0x152>
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3b08      	subs	r3, #8
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	210f      	movs	r1, #15
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	401a      	ands	r2, r3
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	431a      	orrs	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8090 	beq.w	80022dc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021bc:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x2dc>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_GPIO_Init+0x2dc>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_GPIO_Init+0x2dc>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d4:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_GPIO_Init+0x2e0>)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a49      	ldr	r2, [pc, #292]	; (8002320 <HAL_GPIO_Init+0x2e4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1e0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_GPIO_Init+0x2e8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_GPIO_Init+0x2ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1d8>
 8002210:	2302      	movs	r3, #2
 8002212:	e004      	b.n	800221e <HAL_GPIO_Init+0x1e2>
 8002214:	2303      	movs	r3, #3
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x1e2>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_GPIO_Init+0x1e2>
 800221c:	2300      	movs	r3, #0
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222e:	493b      	ldr	r1, [pc, #236]	; (800231c <HAL_GPIO_Init+0x2e0>)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002248:	4b38      	ldr	r3, [pc, #224]	; (800232c <HAL_GPIO_Init+0x2f0>)
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4937      	ldr	r1, [pc, #220]	; (800232c <HAL_GPIO_Init+0x2f0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	4933      	ldr	r1, [pc, #204]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002260:	4013      	ands	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	492d      	ldr	r1, [pc, #180]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	4929      	ldr	r1, [pc, #164]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002288:	4013      	ands	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_GPIO_Init+0x2f0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4923      	ldr	r1, [pc, #140]	; (800232c <HAL_GPIO_Init+0x2f0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	491f      	ldr	r1, [pc, #124]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4919      	ldr	r1, [pc, #100]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4915      	ldr	r1, [pc, #84]	; (800232c <HAL_GPIO_Init+0x2f0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	3301      	adds	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f aeaf 	bne.w	8002050 <HAL_GPIO_Init+0x14>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	372c      	adds	r7, #44	; 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	10320000 	.word	0x10320000
 8002304:	10310000 	.word	0x10310000
 8002308:	10220000 	.word	0x10220000
 800230c:	10210000 	.word	0x10210000
 8002310:	10120000 	.word	0x10120000
 8002314:	10110000 	.word	0x10110000
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]
 800236a:	4613      	mov	r3, r2
 800236c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236e:	787b      	ldrb	r3, [r7, #1]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002374:	887a      	ldrh	r2, [r7, #2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800237a:	e003      	b.n	8002384 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	041a      	lsls	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	611a      	str	r2, [r3, #16]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
	...

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e26c      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	4b92      	ldr	r3, [pc, #584]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023bc:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d112      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
 80023c8:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06c      	beq.n	80024bc <HAL_RCC_OscConfig+0x12c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d168      	bne.n	80024bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e246      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x76>
 80023f8:	4b80      	ldr	r3, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7f      	ldr	r2, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e02e      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x98>
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b78      	ldr	r3, [pc, #480]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a77      	ldr	r2, [pc, #476]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xbc>
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a71      	ldr	r2, [pc, #452]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6e      	ldr	r2, [pc, #440]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 800244c:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a67      	ldr	r2, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff fcce 	bl	8001e0c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fcca 	bl	8001e0c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1fa      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xe4>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fcba 	bl	8001e0c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fcb6 	bl	8001e0c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1e6      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x10c>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1ba      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4939      	ldr	r1, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e03a      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_RCC_OscConfig+0x270>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff fc6f 	bl	8001e0c <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7ff fc6b 	bl	8001e0c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e19b      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4927      	ldr	r1, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_RCC_OscConfig+0x270>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff fc4e 	bl	8001e0c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fc4a 	bl	8001e0c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e17a      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03a      	beq.n	8002614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7ff fc2e 	bl	8001e0c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff fc2a 	bl	8001e0c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e15a      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f000 fa9a 	bl	8002b0c <RCC_Delay>
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7ff fc14 	bl	8001e0c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7ff fc10 	bl	8001e0c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e140      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	42420000 	.word	0x42420000
 8002604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e9      	bne.n	80025e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a6 	beq.w	800276e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b97      	ldr	r3, [pc, #604]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b94      	ldr	r3, [pc, #592]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a93      	ldr	r2, [pc, #588]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b91      	ldr	r3, [pc, #580]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a8a      	ldr	r2, [pc, #552]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7ff fbd1 	bl	8001e0c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7ff fbcd 	bl	8001e0c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0fd      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x312>
 8002694:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e02d      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x334>
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a75      	ldr	r2, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x356>
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a6c      	ldr	r2, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff fb81 	bl	8001e0c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff fb7d 	bl	8001e0c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0ab      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b57      	ldr	r3, [pc, #348]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x37e>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7ff fb6b 	bl	8001e0c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7ff fb67 	bl	8001e0c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e095      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b48      	ldr	r3, [pc, #288]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a47      	ldr	r2, [pc, #284]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8081 	beq.w	800287a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d061      	beq.n	8002848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d146      	bne.n	800281a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff fb3b 	bl	8001e0c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff fb37 	bl	8001e0c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e067      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	4b35      	ldr	r3, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	492d      	ldr	r1, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a19      	ldr	r1, [r3, #32]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7ff fb0b 	bl	8001e0c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7ff fb07 	bl	8001e0c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e037      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x46a>
 8002818:	e02f      	b.n	800287a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff faf4 	bl	8001e0c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7ff faf0 	bl	8001e0c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e020      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x498>
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e013      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	42420060 	.word	0x42420060

08002890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7ff fa44 	bl	8001e0c <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7ff fa40 	bl	8001e0c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1cc>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f9a2 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08003370 	.word	0x08003370
 8002a5c:	2000004c 	.word	0x2000004c
 8002a60:	20000050 	.word	0x20000050

08002a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x30>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x36>
 8002a92:	e027      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	e027      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0c9b      	lsrs	r3, r3, #18
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0c5b      	lsrs	r3, r3, #17
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	fb02 f203 	mul.w	r2, r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e004      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	613b      	str	r3, [r7, #16]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	613b      	str	r3, [r7, #16]
      break;
 8002ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aea:	693b      	ldr	r3, [r7, #16]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	007a1200 	.word	0x007a1200
 8002b00:	08003380 	.word	0x08003380
 8002b04:	08003390 	.word	0x08003390
 8002b08:	003d0900 	.word	0x003d0900

08002b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <RCC_Delay+0x34>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_Delay+0x38>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a5b      	lsrs	r3, r3, #9
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b28:	bf00      	nop
  }
  while (Delay --);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <RCC_Delay+0x1c>
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	2000004c 	.word	0x2000004c
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e041      	b.n	8002bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe ffaa 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fa56 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e035      	b.n	8002c6c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_Start_IT+0x90>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x4e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x4e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_TIM_Base_Start_IT+0x94>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d111      	bne.n	8002c5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d010      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	e007      	b.n	8002c6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400

08002c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f998 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f98b 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f99a 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0204 	mvn.w	r2, #4
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f972 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f965 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f974 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0208 	mvn.w	r2, #8
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f94c 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f93f 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f94e 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f926 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f919 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f928 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fd90 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa6f 	bl	80032ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8f8 	bl	8003024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0220 	mvn.w	r2, #32
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa42 	bl	80032dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_ConfigClockSource+0x1c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0b4      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb4:	d03e      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0xd4>
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	f200 8087 	bhi.w	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	f000 8086 	beq.w	8002fd2 <HAL_TIM_ConfigClockSource+0x172>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d87f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d01a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xa6>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d87b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d050      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x11a>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d877      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d03c      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xfa>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d873      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d058      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x13a>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d86f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d064      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d86b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d060      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d867      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05c      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d05a      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	e062      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f000 f96a 	bl	80031ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	609a      	str	r2, [r3, #8]
      break;
 8002f32:	e04f      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f000 f953 	bl	80031ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	609a      	str	r2, [r3, #8]
      break;
 8002f58:	e03c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 f8ca 	bl	8003100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f921 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002f78:	e02c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 f8e8 	bl	800315c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2160      	movs	r1, #96	; 0x60
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f911 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002f98:	e01c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 f8aa 	bl	8003100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f901 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e00c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 f8f8 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fca:	e003      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
	...

08003038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <TIM_Base_SetConfig+0xc0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <TIM_Base_SetConfig+0x28>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d003      	beq.n	8003060 <TIM_Base_SetConfig+0x28>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a28      	ldr	r2, [pc, #160]	; (80030fc <TIM_Base_SetConfig+0xc4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d108      	bne.n	8003072 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <TIM_Base_SetConfig+0xc0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x52>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x52>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <TIM_Base_SetConfig+0xc4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <TIM_Base_SetConfig+0xc0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]
  }
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400

08003100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 030a 	bic.w	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0210 	bic.w	r2, r3, #16
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	031b      	lsls	r3, r3, #12
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f043 0307 	orr.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	609a      	str	r2, [r3, #8]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003240:	2302      	movs	r3, #2
 8003242:	e041      	b.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d004      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400

080032dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2600      	movs	r6, #0
 8003304:	4d0c      	ldr	r5, [pc, #48]	; (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	f000 f822 	bl	8003358 <_init>
 8003314:	2600      	movs	r6, #0
 8003316:	4d0a      	ldr	r5, [pc, #40]	; (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <__libc_init_array+0x44>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08003394 	.word	0x08003394
 800333c:	08003394 	.word	0x08003394
 8003340:	08003394 	.word	0x08003394
 8003344:	08003398 	.word	0x08003398

08003348 <memset>:
 8003348:	4603      	mov	r3, r0
 800334a:	4402      	add	r2, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <_init>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr

08003364 <_fini>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr
